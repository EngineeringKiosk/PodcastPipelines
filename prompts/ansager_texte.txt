Einige sagen ja, kann ich überhaupt eine IT-Ausbildung machen, wenn ich noch nie zu Hause was programmiert habe. Ich sage immer, der Maurer-Azubi muss auch noch kein Haus gebaut haben. Ja, ganz oft ist es wieder das Vorurteil, ist ja nur eine Ausbildung. Du musst ja studiert haben, wenn du was Vernünftiges machen willst. Nur dann kannst du ja irgendwie programmieren oder Führungskraft wählen oder sonstiges. Also das finde ich zum Beispiel auch völlig banane, diese Geschichte. Ich hatte wirklich schon Prüflinge, die mit Kobol ihr Abschlussprojekt programmiert haben. Mega cool, weil er hat dann quasi das MVC-Pattern in Kobol nachgebaut und das war so...

Seit einer gefühlten Ewigkeit sprechen wir von einem Fachkräftemangel. Um diesen Mangel einigermaßen auszugleichen, arbeiten viele Unternehmen regelmäßig mit Freelancern zusammen. Ab und zu als Berater, ab und zu als Erweiterung des eigenen Teams. Auf den ersten Blick klingt dies recht verlockend. Man selbst arbeitet an unterschiedlichen Projekten, stellt jede Stunde in Rechnung, ist sein eigenes Unternehmen, ist zeitlich flexibel und macht Urlaub wann man will. Doch ist das wirklich so? In dieser Episode sprechen wir über das Thema mit gleich drei Freelancern. Ich, Andi, als einziger Angestellter interview Wolfgang sowie Thomas Diroll und Christian Braun vom Index Out of Bounds Podcast. Was ist Ihre Motivation zum Freelancing? Verdienen Sie wirklich so viel? Wie sieht es aus, wenn es mal schlecht läuft? Wie sieht es mit der eigenen Weiterbildung aus? Und wie gut sind eigentlich Engineers im Sales? All das und noch viel mehr. Los geht's! Heute haben wir eine etwas andere Folge. Und zwar sind wir nicht zu zweit, wir sind nicht zu dritt, sondern wir sind heute zu viert in diesem Aufnahmestudio für diesen Podcast.

Willkommen zu einer neuen Episode vom Engineering Kiosk. In dieser Folge geht es um Diversity. Ein Thema, was von vielen kontrovers, sehr wichtig, aber auch mit viel Respekt angesehen wird. Wir klären, was Diversität bedeutet und wo der Unterschied zu Inklusion und Gleichberechtigung ist, welcher Effekt dies auf Teams haben kann, wie es um Diversityquoten und Mangel an IT-Kräften steht, aber auch, warum es für viele Leute schwierig ist, dieses Thema zu besprechen. Genug Geschwafel, springen wir direkt rein. Viel Spaß.

Hast du gewusst, dass Netflix ausschließlich Senior Engineers hat? Zumindest bis vor ein paar Monaten. Denn auch jetzt haben sie sich dem Staff-Level geöffnet. So wie viele andere Tech-Firmen auch. Sogar in Deutschland. Aber was ist eine Staff-Engineering-Stelle? Wo ist der Unterschied zum Senior und wie hat denn die ganze Programmierwelt früher ohne den Staff-Level überleben können? Ist das Ganze vielleicht nur eine Marketing-Erfindung? All das klären wir in dieser Episode vom Engineering Kiosk. Und nebenbei auch noch, was ein Hofrad oder eine Kommerzialrätin ist. Also ab geht's in die Welt der Titel. Andi, ihr habt dich ja schon in viele österreichische Dinge eingeführt, kürzlich gerade in die österreichische Politik, wo man sich ja so Chat-Messages schickt wie, du bist die Hure der Reichen oder so ähnliche Dinge. Heute will ich dich mal einführen in die österreichische Titellandschaft. Und da hätte ich gleich ein paar Fragen.

Herzlich willkommen zu einer neuen Episode vom Engineering Kiosk. Heute geht es um das Thema Message Queues, also die asynchrone Verarbeitung von Nachrichten durch dedizierte Worker oder auch Consumer genannt. Wir klären, was Message Queues sind und welche klassischen Anwendungsfälle damit abgedeckt werden können, was der Open Source Platzhirsch RabbitMQ als Message Broker so drauf hat, ob eine relationale Datenbank auch als Message Queue genutzt werden kann, wo der Unterschied zu PubSub und Streams ist und was Redis, Kafka und ZeroMQ damit zu tun haben. Und los geht's! Viel Spaß! Lieber Wolfgang, ein frohes neues Jahr. Mich würde mal interessieren, wann standest du das letzte Mal in einer Warteschlange? Wann musstest du mit einer Reihe von Leuten auf etwas warten?

Wer nicht mit der Zeit geht, geht mit der Zeit. Aber was ist, wenn die Zeit uns ersetzt? Und damit willkommen zu einer neuen Episode vom Engineering Kiosk, in der wir uns fragen, ob unsere Arbeit bald noch benötigt wird. Oder übernehmen die Cloud, NoCodeTools und die künstliche Intelligenz unsere Jobs? Wir versuchen uns der Antwort über die Vergangenheit zu nähern. Denn es ist nicht das erste Mal, dass unsere Jobs durch Technologie ersetzt werden sollen. Aber sind die Szenarien dann überhaupt vergleichbar? Oder muss man jetzt automatisch zum Data Scientist werden, um nicht den Anschluss zu verlieren? Finde das heraus! Ah, und übrigens, wenn Themen wie GitHubs neue künstliche Intelligenz namens Copilot zu modern sind, keine Sorge, wir reden in dieser Episode auch über alte Schmiedekunst, Schuster und Bohrmaschinen. Andi, ist dir bewusst, die wievielte Episode wir gerade machen? Was ist die Nummer?

A, O, F, R, D, B und L, M, P, S, Q, L, D, E, L und B, G, safe. Entschuldigung, da ging es wohl mit mir durch. Das war nun nicht der Song mit freundlichen Grüßen von der Band die Fantastischen Vier, sondern alles Begriffe von meiner Lieblingsdatenbank. Sofern die Technologie als Datenbank bezeichnet werden kann. Heute geht es um den Datenschruktur-Server Redis. Aber nicht nur, was Redis ist, sondern mit einer Menge Wissen drumherum. Was ist HyperLogLog? Welche Use Cases hat Redis neben Caching? Was sind klassische Fallstricke beim Einsatz von Redis? Und wer ist eigentlich der Kopf hinter dieser Technologie? Das und noch viel mehr in der nächsten Stunde. Los geht's!

Liest du eigentlich Bücher in der Arbeitszeit? Wie sieht das ganz allgemein aus? Wird deine Weiterbildung bezahlt oder übernimmst du das selbst? Und damit sind wir schon ganz tief im Thema dieser neuen Episode des Engineering Kiosks. Super, dass du dabei bist, denn bei uns geht es heute um die Weiterbildung. Wobei, um die Weiterbildung geht es eigentlich immer in einem Podcast. Also starten wir hinein in das Metathema Weiterbildung. Von neuen Trends wie dem Paid Newsletter, ob der sein Geld wert ist, bis hin zu Friedrich Schillers Meinung zu Zertifizierungen. Wir besprechen aber auch die schmutzigen Seiten der Weiterbildung, wie damit Geld verdient wird, wie Weiterbildungen im Bewerbungsprozess helfen können, aber auch zum Knockout-Kriterium werden können und was es sonst noch so für Weiterbildungsangebote gibt. Vom Massive Open Online Course bis hin zum klassischen Buch. Und ja, das gibt es immer noch. Aber sprechen wir nicht länger über alte analoge Technologien, sondern machen direkt weiter auf unserem hochmodernen Fortbildungskanal, dem Podcast.

Willkommen zu einer neuen Mächenstunde im Engineering Kiosk. Dieses Mal mit unseren Mächenfiguren, der nicht skalierenden Datenbank, Kubernetes, der die nicht skalierende App rettet, mutige Webshop-Server, die sich mit Rammstein und den toten Hosen anlegen, Lügengeschichten der Ausfallsicherheit und was natürlich nie fehlen darf, das Mächen von der Marie. Denn billig ist Skalierung nie. Heute sprechen wir ja über das Märchen der Eskalierung und Andi, du hast dir schon eine Märchenstimme zugelegt, dessen nenne ich mal ein Satz.

Hi, Knorke, dass du wieder dabei bist, bei einer neuen Episode vom Engineering-Kiosk. Heute geht es um das Thema Leadership. Jetzt denkst du dir bestimmt, ach nö, wieder nur was für Führungskräfte. Falsch. Leadership ist nicht nur für Leute mit Personalverantwortung, sondern auch für Senior und Staff Engineers und alle, die es mal werden wollen. Ach was erzähl ich denn da. Prinzipiell geht es einfach jedem was an, der in einem Team arbeitet. Wir sprechen über Servant Leadership, die dienende Führung. Was ist das? Wieso ist es gerade groß im Kommen? Was haben die Millennials Generation und Gen Z damit zu tun? Wann ist der Leadership-Stil unangebracht? Und warum hat die Frage, warum mache ich das Ganze hier eigentlich, so einen großen Stellenwert? All das und noch viel mehr. Los geht's!

Sollten wir alte Software akzeptieren oder lieber jedem Update hinterherjagen? Das ist die Balance die jeder von uns finden muss. Wann update ich Software? Wie lange kann ich alte Software betreiben? Wann ist alte Software ein wirkliches Risiko? Sollte ich bei jeder neuen Major Version direkt updaten? Bringt es überhaupt was eine alte Software auf etwas Neues zu migrieren ohne neue Funktionalitäten zu bekommen? Und welche Risiken verbergen sich hinter den Updates? Und final, ist der klassische Spruch Never Touch a Running System eigentlich noch aktuell oder sogar ein Fehler? All das und weitere Themenbereiche wie Long Term Support, End of Life Dates, die Softwaremetrik Dependency Drift, Dependabot und Rostendes Software besprechen wir in dieser Episode. Viel Spaß! Moment! Bevor der Spaß losgeht, müsst ihr noch was wissen. Wir haben diese Episode direkt bei Andi in Duisburg aufgenommen. Und weil wir so viel Spaß daran hatten, haben wir auch noch eine Kamera mitlaufen lassen. Ihr könnt also jetzt direkt in die SnowNotes gehen, auf den Link dort klicken und könnt uns nicht nur hören, sondern auch sehen, falls das wirklich jemand wollen sollte. Und noch zur Info, durch das andere Setup ist auch die Tonqualität eine andere. Ich vermute immer noch, es liegt an den ganzen Stahlwerken in Duisburg und die hatten irgendwie Einfluss auf die Mikros. Aber jetzt wirklich zum Content und viel Spaß quasi fast live aus Duisburg.

Moin Leute, in dieser Episode geht es mal wieder um Open Source. Und um Geld. Vielleicht bist du selbst ein Open Source Contributor oder Maintainer. Oder es steht auf einer deiner To-Do-Listen für 2023 mal den ersten Pull-Request zu eröffnen. Auf jeden Fall nutzt du Open Source in deinem Alltag. Und wenn du dir einmal Gedanken darüber machst, wer diese ganze Software eigentlich in Schuss hält, auf der unsere aktuelle Gesellschaft aufgebaut ist, dann wird dir recht schnell schlecht. Die Masse an Open-Source-Projekten wird von Freiwilligen in ihrer privaten Zeit maintained. Um dem etwas entgegenzusetzen, sprechen wir heute über die Möglichkeiten zur Finanzierung deines Open-Source-Projektes bzw. Wege, um mit deinem Open-Source-Projekt Geld zu verdienen. Vom klassischen Sponsoring, über staatliche Förderung oder dem Early Access Modell bis hin zur klassischen Anstellung als Open Source Maintainer. Und am Ende klären wir noch, ob es unmoralisch ist mit Open Source Geld zu verdienen. Viel Spaß! Lieber Wolfgang, habe ich dir eigentlich mal gesagt, dass ich mich sehr sehr gefreut habe, dass du den weiten Weg aus dem tiefen Österreich zu uns in den Westen gefunden hast, damit wir im realen Leben zusammen zur FOSDEM-Konferenz nach Brüssel fahren konnten und uns dort wirklich getroffen haben, ein Bier getrunken haben und uns glaube ich sogar ein Croissant geteilt haben?

Was machst du, wenn deine Lieblingsprogrammiersprache oder dein Lieblingsframework in deiner Firma nicht mehr gewünscht wird? Einfach einmal so wegkonsolidiert. Und mit dieser Frage heißen wir dich herzlich willkommen bei einer neuen Folge des Engineering Kiosks. Start-up haben ja oft den Autonomieansatz, beliebige Technologien, Hauptsache es geht schnell, effizient und löst ein Problem. Die Big Player hingegen sind meist wesentlich unflexibler. Aber was ist denn der bessere Ansatz im Sinne von MitarbeiterInnen-Motivation, Produktivität, Entwicklungsspeed, Innovationsfreundlichkeit, Wartbarkeit, Recruiting und Onboarding? Und was passiert, wenn man langsam als Startup wächst und irgendwann fünf Clouds gleichzeitig nutzt? Macht das überhaupt noch Sinn? Muss konsolidiert werden? Und wenn ja, wie konsolidiert man, ohne dass dabei alle aus Frust kündigen? Viele Fragen, die wir versuchen in dieser Episode zu beantworten. Und los geht's! Andi, was ist deine Lieblingssprache?

Über Jahre war Clean Code die Geheimwaffe, die behutsam von alten weißen Senior Developern als Geheimwaffe an jüngere Generationen weitergegeben wurde. Und jetzt das. Clean Code von Uncle Bob ist also Schuld, warum ich meinen alten Computer nicht mehr verwenden kann und alles so langsam geworden ist? Diese Aussage aus einem viralen YouTube-Video hat mich wirklich getriggert. Und damit willkommen zu einer neuen Episode des Engineering Kiosks, in der Andi und ich etwas tiefer in das Thema einsteigen. Wer kämpft denn da gegen Uncle Bob und Clean Code? Um was geht's eigentlich? Stimmt das Ganze? Und überhaupt, wer ist eigentlich dieser Uncle Bob? So Andi, was ist der coole, hippe Scheiß, den alle Influencer machen heutzutage? Mit dir über Influencer reden, das funktioniert nicht.

So, an alle euch Jäger und Sammler da draußen. Sammeln alleine ist nicht genug. Neben dem Sammeln muss man nämlich auch verarbeiten, organisieren, durchsehen und erledigen. Denn nur so wird man produktiv und bekommt den Kopf frei. Und damit willkommen zu einer neuen Episode des Engineering Kiosk, in der wir über stressfreie Produktivität sprechen und wie man diese mit einem einfachen System erreichen kann. Und nachdem wir produktiv sind, legen wir auch gleich direkt los. Anni, du bist doch Apple-User, oder?

Wie sehr nervt dich eigentlich eine langsame Webseite? Also eine, die so richtig lange braucht, um die ersten Informationen anzuzeigen. Mich nervt das schon so richtig. Und deswegen sprechen wir heute mal über den Grund, warum die meisten Websites im Internet nicht mehr langsam sind. Wir sprechen über Content Delivery Networks. Angetreten, um einzelne Server bzw. Webseiten vor Überlastung zu schützen, bilden diese heutzutage das unsichtbare Netz, welches uns Dateien schnell ausliefert. Aber was sind CDNs eigentlich genau? Welche Arten von CDNs gibt es und was ist ein Point of Presence und wie unterscheidet sich dies zu einer Edge-Location? Wie hängt das Thema mit GDPR bzw. DSGVO zusammen? Und überhaupt, sollte ich ein CDN verwenden und wie würde ich das Ganze eigentlich in meine App integrieren? Darum geht es heute. Wir legen sofort los. Viel Spaß dabei. Vor kurzem haben wir uns relativ viel über Proxys unterhalten. Forward-Proxys, Reverse-Proxys, Socks-Proxys und so weiter und so fort. Und da haben wir relativ gutes Feedback bekommen. Unter anderem auch von Thomas vom Index-Out-of-Bound-Podcast. Alle Hörerinnen und Hörer, die mal so langsam die Schnauze voll haben von dem Österreicher und dem Typen aus dem Ruhrpott trotzdem was über Software-Engineering lernen wollen, geht mal rüber zu den Jungs von Index-Out-of-Bounds. Die machen auch ziemlich guten Content. Sehr empfehlenswert.

Es gab mal eine Zeit, da ist ein Milliardenkonzern aus Austin, Texas mit dem Namen Oracle auf Shoppingtour gegangen. Man dachte sich, och lass uns doch mal Sun Microsystems kaufen. Mit dem Deal ging nicht nur die Programmiersprache Java an Oracle, sondern auch eine kleine Datenbank namens MySQL. Der Hauptentwickler, Monty, fand dies alles andere als lustig und hat in keinster Weise an Oracles Open Source Philosophie geglaubt. Da hat er direkt Nägel mit Köpfen gemacht und MySQL geforkt. MariaDB wurde geboren. Angetreten als MySQL Drop-In Replacement. Doch wie viel ist davon noch übrig? Wo ist MariaDB mit der MySQL Kompatibilität treu geblieben? Und in welchen Bereichen ist die Datenbank ihren eigenen Weg gegangen? Was gibt es Neues im Bereich Storage Engines? In dieser Episode schauen wir uns das Original und den Fork mal genauer an. Und nun zum Wetter. Wolfgang, ich hörte die Tage in den Nachrichten, dass das Wetter wieder verrückt spielt und in Tirol es um Ostern oder kurz nach Ostern wieder Schnee gab.

Dank Chet, GPT und Co. ist der Turing-Test in aller Munde. Aber was steckt eigentlich dahinter? Und damit willkommen zu einer neuen Episode des Engineering Kiosks. Einer ganz besonderen Episode. Denn sie ist der Start einer neuen Serie, in der wir Personen und ihre Erfindungen betrachten, die einen fundamentalen Einfluss auf die Informatik gehabt haben. In dieser Episode starten wir mit Alan Turing, dem Erfinder der Turing-Maschine und Namensgeber des Turing-Tests. Wir tauchen in die Berechenbarkeit ein, besprechen, ob Quantencomputer mehr leisten können, was das Hilbert-Kalkül ist, was Lambda-Funktionen damit zu tun haben und ob man Gott eigentlich logisch beweisen kann. Begleitet uns also auf eine Reise von den Anfängen der Computer bis zu den aktuellsten Themen im Spannungsfeld KI und Mensch. Und los geht's!

Willkommen im Engineering Kiosk und cool, dass du wieder dabei bist. In dieser Episode geht es um das Thema Caching. Mit hoher Wahrscheinlichkeit fallen dir sofort Dinge wie Redis, Memcache, Local Storage und Co. ein. Doch all diese Dinge lassen wir einfach mal weg. Wir sprechen über Cache-Hierarchien, über CPU-Caches L1 bis L4, wie du cachefreundlich programmieren kannst und überprüfst, ob dein CPU-Cache ordentlich ausgenutzt wird und das Ganze sogar mit JavaScript. Welche Ersetzungsstrategien es gibt, wenn der Cache voll ist, sowas wie LIFO, FIFO, Least Frequently Used und Least Recrently...

Github hat im Januar angekündigt, dass Paypal abgeschaltet wird. Das hatte zur Folge, dass alle Sponsorings, die über Paypal bezahlt werden, automatisch gekündigt werden. Ich habe Github währenddessen gecrawlt und habe hochgerechnet, dass das wahrscheinlich 240.000 Dollar pro Monat an Sponsorings vernichtet hat. woanders gesehen, dass jemand eine Amazon-Wishlist hatte. Und da dachte ich mir, weißt du was, dann mache ich einfach das. Ich mache einfach eine Amazon-Wishlist, ich probiere das mal aus. Und da kamen tatsächlich Sachen. Und das war so absurd, weil da war ein Whisky drauf, der kostet 120 Euro und der kam.

Ich sage immer, es muss idealerweise bunt und kreativ sein und Spaß machen, Spiele entwickeln. Also nicht diesen sehr theoretischen Ansatz, der auch oft in der Schule vermittelt wurde. Weil wir sind jetzt einfach in einer Zeit, da passiert so viel in so kurzer Zeit. Da müssen wir uns alle weiterbilden und vor allem die Lehrerinnen und Lehrer, die so einen wichtigen Job haben, weil die sind dafür verantwortlich, dass die Zukunft, die gerade auf den Schulbänken sitzt, dass die halt gut vorbereitet sind. Was wir uns eben nicht leisten können, dass wir jetzt quasi die guten Lehrkräfte, die jetzt noch da sind, dass wir die verkraulen und dass wir denen die Arbeitsbedingungen so schlecht machen, dass die auch keine Lust mehr drauf haben.

Das heißt, als Faustregel ist es so, wenn du im Web irgendwas machst, nimm eine WoW2-Schrift und wenn du am Computer irgendwas machst, ist er eigentlich mit TTF meistens gut bedient. Eigentlich müssen wir nicht mehr Monospace-Schriften haben zum Programmieren. Eigentlich ist es schade, weil, und da kommen wir so ein bisschen zurück an das Schriftdesign, dass wir dadurch eingeschränkt sind, wie wir Zeichen gestalten und dass eigentlich das Schriftbild vielleicht sogar harmonischer ist, wenn wir nicht Monospace nehmen.

Wenn man sich so die öffentlichen Jobanzeigen ansieht, erkennt man recht schnell, dass nur Senior Engineers gesucht werden. Doch wie sieht es eigentlich mit dem Nachwuchs, den Junior Engineers, aus? Wo finden Personen mit keiner oder wenig Berufserfahrung einen Platz in der Softwareentwicklungsbranche? In dieser Episode sprechen wir über das Potenzial von Junior Engineers, wie man die Motivation von Kandidaten in Interviews erkennt, welche Rolle persönlicher Bias und strukturierte Interviews spielen, Welche Möglichkeiten gibt es Juniors und Juniors hoch zu coachen, welche Balance an Erfahrung man innerhalb eines Teams halten sollte und wie teuer Recruiting eigentlich wirklich ist. Und das alles gespickt mit persönlichen Geschichten. Wir springen direkt rein. Viel Spaß!

Also nach meinem Erlebnis damit würde ich jetzt als CTO oder eigentlich als Priority Nummer 1 sehen, meinen ProgrammiererInnen sowas zur Verfügung zu stellen. Und das ist glaube ich auch die große Stärke von Copilot, weil du ganz viele Kontext-Switches vermeidest. Ich glaube von den 100 Zeilen habe vielleicht 10 Zeilen ich geschrieben.

Wenn wir sagen, wir haben eine Fehlerkultur und jedes Team macht doch eigentlich den Fehler, dann haben wir keine Fehlerkultur, dann ist das Management einfach scheiße. Ich wurde nach acht Monaten Manager, Teamleiter mit meinem ersten Hire, da war ich dann also gerade 25, 26. Habe ich da vielleicht mal ein bisschen mehr geteilt, als ich sollte, auf jeden Fall. Nachdem man den Fehler gemacht hat, kommt der anstrengende Teil. Der anstrengende Teil, den keiner mag.

Also meine Internet-Experience besteht ja darin, dass ich 99,9% von allem, was an mir vorbei scrollt, ignoriere. Und das machen die meisten so und die kommen damit super klar, warum das gerade im Fall von JavaScript-Frameworks unmöglich sein soll, dass man da irgendwie zu all diesen Dingern eine Meinung haben muss und von wegen, das ist jetzt aber eins zu viel, das verstehe ich nicht so ganz. Es ist halt eben tatsächlich so eine Verbindungssprache oder halt eben auch eine Scharniersprache zwischen allen möglichen Welten.

Und ich hatte noch diesen Glaubenssatz, ich muss der beste Entwickler sein, um überhaupt Teammanager werden zu können. Ich dachte am Anfang, das ist ja so ein bisschen Orga-Kram. Guck mit den Leuten, dass die nicht so viele Aufgaben haben, dass die Sachen rechtzeitig fertig werden. Aber wie klein dieser Anteil eigentlich ist, war mir so nicht bewusst. Das ist ja keine One-Man-Show, das ist ja im Gegenteil. Mein Job ist ja eigentlich, mein Team zu befähigen, die Aufgaben zu machen.

Es gibt ja Projekte, da gibt es nur ganz wenige Personen, die Code merchen können. Bei uns ist es so, dass jeder Pull-Request, der einkommt, muss zwei Reviews haben von zwei anderen Personen und dann wird er gemerged. Man muss einfach nur andere zwei Personen finden, die derselben Meinung sind. Und niemand davon muss jetzt Angestellter der Firma sein. Es kann auch komplett die Community sein. Es können ja drei Personen aus der Community sein. Eine Person macht einen super Vorschlag. Dann find's gut, da ist es gemerged. Das meine ich mit Offenheit. Da gibt's nicht irgendwie die Firma, die das letzte Recht hat und dann noch irgendwie alles approven muss. Sowas haben wir nicht.

Da ist die nächste Frage, sollte die Geschäftsführung auf die DORA-Metriken gucken oder nicht nur die Engineering-Abteilung? Denn wenn du an den falschen Sachen arbeitest, shippst du falsche Sachen einfach nur schneller. Willkommen zum Engineering-Kiosk, der deutschsprachige Software-Engineering-Podcast mit Wolfgang Gaßler und mir, Andi Grunwald, rund um die Themen Engineering-Kultur, Open Source, Menschen, Softwareentwicklung und Technologie sowie was damit in Verbindung steht. Softwareentwicklung ist ein kreativer Beruf. Jedes Projekt und jedes Feature ist irgendwie ein bisschen anders. Und das ist der Grund, warum eine objektive Messung oder eine Vergleichbarkeit so schwierig ist. Die Dora-Metriken aus dem DevOps-Umfeld versuchen aber genau das. Eine Messung der Performance eines Software-Development-Teams. Worum es dabei wirklich geht, welche Metriken dabei eine Rolle spielen, wer hinter Dora steht und warum das Ganze auch oft kritisch gesehen wird. All das in dieser Episode. Viel Spaß! Lieber Wolfgang, du bist ja ein sehr datengetriebener Mensch, beziehungsweise wenn ich dir mit dem alten Spruch Data is the new Oil ankomme, dann sage ich immer genau.

Willkommen zu einer neuen Episode vom Engineering Kiosk, deinem deutschsprachigen Software Engineering Podcast. In welchem Licht steht bei dir eigentlich die Personalabteilung? Als strategischer Partner auf Augenhöhe oder ist es dein Feind und Blocker? Für viele ist die Personalabteilung ein notwendiges Übel. Dennoch kann die HR auch ein Team sein, welches dir eine Menge Arbeit abnimmt und neue Möglichkeiten eröffnet. Heute sprechen wir mit Patrick Kuster, einem Personaler, der die letzten 11 Jahre den Wandel der Personalabteilung mitgestaltet hat. Wir sprechen mit ihm über Lebensläufe und Recruiting, künstliche Intelligenz im Kandidatenauswahlprozess, Jobbenefits wie unbegrenzten Urlaub, sowie deine Möglichkeiten und Rechte auf Arbeitszeitverkürzung durch Teilzeit, mit einem Sabbatical eine Auszeit nehmen oder Bildungsurlaub. Wir springen direkt rein. Viel Spaß. Diese Podcast-Aufsage startet schon wunderbar. Zwei ITler sitzen remote mit einem Personaler. Und bei wem klappt mal wieder die Technik überhaupt nicht? Beim Personaler. Wahnsinn. Wie stereotypenhaft können wir werden?

Der Klimawandel ist real. Da erzähle ich euch nichts Neues, denn wir pendeln zwischen den Extremen. Wenn die Sonne scheint, wird es direkt über 30 Grad. Wenn es regnet, sind wir sofort bei Starkregen mit 40 Liter und mehr pro Quadratmeter. Auf der anderen Seite steigt unser Energiebedarf immer und immer weiter. Alles wird digitalisiert, alles hat eine App, alles wird getrackt. Wie passt dies nun eigentlich zusammen? Der CO2-Ausstoß und Klimawandel sowie unser erhöhter Energiebedarf? Gegebenfalls sind wir, Softwareentwickler und Softwareentwicklerinnen, Teil des Problems. Also, wie sieht es in der Welt der Softwareentwicklung und Infrastruktur eigentlich aus? Was können wir, die Leute aus der Welt der Softwareentwicklung und Infrastruktur, nun eigentlich tun, um unseren CO2-Fußabdruck unter Kontrolle zu halten bzw. zu senken? Und zuallererst, für wie viel Kohlendioxid sind wir eigentlich verantwortlich bzw. haben unter unserer Kontrolle? Ihr merkt schon, sehr große Fragen. In dieser Episode werden wir uns mit dem Gast Christian Schepp-Schäfer ein bisschen Licht in das komplexe Thema der Green IT bringen. Es geht um die Herstellung und Nutzung von Client- und Server-Hardware, den Energieverbrauch von einzelnen Farben auf deinem Screen, welchen CO2-Fußabdruck ein Gigabyte Datenvolumen hat, Green Hosting bei Cloud Hyperscalern und vieles, vieles mehr. Und los geht's!

Deine Datenbank skaliert nicht mehr? Hol dir doch einfach ein verteiltes Datenbanksystem. Das funktioniert doch heute alle schon out of the box. Habt ihr diesen Dialog auch schon einmal gehört? So oder so ähnlich? Wenn man dann aber genauer nachfragt, wie die verteilte Datenhaltung denn funktioniert, welche Kriterien erfüllt werden und wie sich das System bei einem Ausfall von Knoten verhält, wird es sehr oft sehr schnell leise. Und damit willkommen zu einer neuen Episode des Engineering Kiosks, dem deutschsprachigen Software-Engineering-Podcast mit Wolfgang Gassler und Andi Grunwald rund um die Themen Engineering Kultur, Open Source, Menschen, Technologie und allen anderen Bereichen, die damit in Verbindung stehen. Wir besprechen in dieser Episode anhand des CAP-Theorems die Schwierigkeit von verteilten Systemen. Und für alle, für die CAP ein alter Hut ist, wir sprechen auch über Buck Elk, die große Schwester vom CAP-Theorem, Aber auch über Konsistenzkriterien, Ausfalltoleranzen, verteilte COMIT-Protokolle und wie sich das Ganze auch abseits von Datenbanken auf verteilte Systeme auswirkt. Und wer wissen will, warum verteilte Systeme wie Handwerker sind, sollte auf jeden Fall weiterhören. Ich glaube, ich brauche nicht dazu sagen, dass dieser Vergleich von Andi kommt. Aber starten wir ins Thema und los geht's.

Ihr wundert euch jetzt vielleicht, es ist gar nicht Dienstag und schon wieder neue Episode in der Playlist. Und dann hat sie nicht einmal eine ordentliche Episoden-Nummer. In Österreich würden wir es vielleicht Belangssendung nennen, manche nennen es Wrap-Up oder einfach nur Andi und ich feiern den ersten Engineering Kiosk Geburtstag. Wir blicken hinter die Kulissen, besprechen einige Statistiken und erzählen euch auch, was wir in der Zukunft noch so vorhaben. Irgendwie ist mir die Musik schon langsam ans Herz gewachsen. Aber jetzt hoffen wir, dass ihr mit uns den ersten Geburtstag feiert. Nimm dir nur deine Zeit.

Willkommen zu einer neuen Folge vom Engineering Kiosk. Heute mit einer etwas anderen Episode, der eigentlichen Folge 0. Nach 5 Folgen ziehen wir ein kleines Resümee und reden darüber, wer sind wir eigentlich, stellen uns kurz vor, warum machen wir diesen Podcast, wie sind wir an dieses Projekt herangegangen und was sind unsere aktuellen technischen Learnings nach 5 Folgen. Steigen wir direkt ein und los geht's.

Willkommen zu einer neuen Episode vom Engineering Kiosk. Heute mit dem Thema Side Projects. Wir schauen uns an, was Side Projects mit dem Recruiting Prozess zu tun haben, warum die Learnings, die man aus einem Side Project zieht, nicht ganz offensichtlich sind, wenn man ein Projekt beginnt und warum man nicht seinen eigenen E-Mail Server betreiben sollte. Und wir springen direkt rein. Los geht's!

Willkommen zur zweiten Episode vom Engineering-Kiosk. Heute machen wir mal eine Rundfahrt durch unseren Technologien-Zoo, den wir in unseren Side-Projects verwenden. Wir sprechen über MySQL, RabbitMQ, alte Send-Frameworks, BAB-Versionen, Docker Swarm, wie man richtig SSL-Zertifikate generiert, welche Hosting-Plattformen wir verwenden, wie man Monitoring richtig macht, ob man Monitoring überhaupt braucht und wie Andi als Athlet gescheitert ist. Guten Morgen.

Willkommen im Engineering Kiosk. Heute haben wir im Sonderangebot Overengineering. Was das ist, erklären wir gleich und ich diskutiere auch mit Andi, ob es Underengineering gibt, wie Hacker News Overengineering beeinflusst und wenn ihr wirklich dranbleibt, dann plaudern wir auch ein paar Geheimnisse aus. Zum Beispiel, welche Leichen die Wissenschaft, aber auch Google, im Keller haben.

Willkommen im Engineering Kiosk. Heute haben wir im Angebot eine neue Episode zum Thema Open Source. Und Andi ist ja der absolute Open Source Profi und darum werde ich ihn ausquetschen, warum Firmen unbedingt auf Open Source setzen sollen. Und ganz spannend, wir werden auch lernen, warum Andi auf einer Hochzeit nackt durch die Wohnung rennt, nur wegen Open Source. Also starten wir los. Eine neue Episode im Engineering Kiosk. Aktuell scheint die Sonne, es ist noch relativ früh, wir können noch kein Bier trinken, aber immerhin Biomate, ah, Miomate. Miomate steht vor uns, hat der Andi gesponsert. Und heute wollen wir mal sprechen über Open Source. Genau. Der Andi kennt sich da sehr gut aus. Der ist meiner Meinung nach in meinem Bekanntenkreis der, der am meisten Open Source macht und am tiefsten drin ist. Er hat auch ein großes Side Project. Wir haben letztes Mal über Side Projects gesprochen. Was machst du in deinem Side Project? In zwei Sätzen erklärt.

Willkommen bei einer neuen Episode des Engineering-Kiosks. Habt ihr euch eigentlich schon mal gefragt, was bei euch der nächste Karriere-Schritt ist? Ihr seid schon seit ein paar Jahren Software-Engineer und wisst nicht, ob ihr den nächsten Schritt zum Engineering-Manager, zur Engineering-Managerin gehen sollt? Das ist das Thema der heutigen Folge. Wolfgang und ich sprechen über unsere Erfahrungen, was es heißt, ein Engineering-Manager zu sein, wie man entscheidet, ob dies der richtige Schritt für einen ist, welche Vorteile, welche Nachteile gibt es und ob es ein Rückschritt ist, wenn man wieder zum Software-Engineer wechselt. Wir springen direkt rein und los geht's. Guten Morgen Wolfgang.

Willkommen zu einer neuen Episode des Engineering Kiosks. Dieses Mal haben wir eine richtig freie Diskussion wie direkt vor dem Kiosk. Und zwar über Hypes und Karrierepfade. Oder wahrscheinlich wie Andi sagen würde, Karrierepfade. Die Folge ist eigentlich aus einer Vordiskussion entstanden, in der Andi Machine Learning als Hype bezeichnet hat. Und das konnte ich natürlich einfach nicht auf mir sitzen lassen, daher habe ich auf den Record-Button gedrückt und wir haben diskutiert, ob Studenten und Ingenieure sich Hypes widmen dürfen oder vielleicht sogar sollen, ob wir Jobtitel gut finden, über Engineering-Gehälter und wie privilegiert Developer heutzutage sind und über Andis 5-Jahres-Plan, der seine täglichen Entscheidungen beeinflusst. Hast du gehört von dem Alphabet-Google-DeepMind-Programmierer, dem Artificial-Programmierer?

Willkommen zu einer neuen Episode beim Engineering Kiosk. Sein eigener Boss sein, freie Zeiteinteilung, nur interessante Projekte machen und dabei auch noch exorbitant viel Geld verdienen. Wir besprechen heute den Traum der Selbstständigkeit und welche Fragen man sich stellen sollte, bevor man den Schritt zum Freelancing wagt. Hallo Wolfgang. Einen wunderschönen guten Abend. Heute ausnahmsweise mal am Abend. Bisher haben wir immer in der Früh oder am Morgen, wie du sagst, aufgenommen. Heute mal am Abend. Eigentlich sollten wir uns Bier organisieren, oder? Warum haben wir kein Bier?

Herzlich willkommen zu einer neuen Episode hier bei uns im Engineering-Kiosk. Heute wird es wieder etwas technischer. Heute zum Thema Datenbanken und ganz im Speziellen zum Thema MySQL. Wir haben uns gefragt, ob diese Datenbanken überhaupt noch skaliert, haben über Tools gesprochen wie SQL-Proxy und Vitesse, SQLite, wann man lieber einzelne Dateien statt Datenbanken nutzen kann und wie einfach es ist, seine eigene Datenbank zu schreiben. Und zum Schluss gibt es noch ein paar Tipps zum MySQL-Performance-Tuning. Bevor es losgeht, noch ein kleiner Hinweis in eigener Sache. Falls euch die letzte Episode gefallen hat, drückt doch mal ganz kurz auf Pause, kopiert den Link in eurer favorisierten Podcast-App und schickt ihn doch einfach mal rum an Freunde oder vielleicht auch im Filmstack. Das würde uns sehr helfen, unsere Hörerschaft zu erweitern und auch neues Feedback zu kriegen. Vielen Dank dafür und jetzt geht's ab zum Thema Datenbank.

Willkommen zu einer neuen Episode des Engineering Kiosks. Vielleicht habt ihr auch schon mal die Aussage gehört, One-on-ones sind sowieso nur Zeitverschwendung. Wir sind da natürlich anderer Meinung und besprechen in dieser Episode, wie jede Person, egal in welcher Position in der Firma, aus One-on-ones unglaublich wertvolle Informationen ziehen kann. Kleine Frage, wie viele One-on-ones hast du in deinem Leben schon geführt? Uh, das ist keine Zahl, uh.

Willkommen zu einer neuen Episode des Engineering Kiosks. Wir besprechen heute, wie wir neue Firmen und Jobs finden, was uns dabei wichtig ist und wie man das vor und während dem Interview herausfinden kann. Und als kleines Extra gibt es viele Traktorengeschichten von Andi.

Willkommen zu einer neuen Episode des Engineering-Kiosks. Der eigene Hardware-Server oder doch besser eine Cloud-Lösung? Software hinzukaufen, Open-Source-Software verwenden oder doch einfach selber programmieren? Diese Fragen und alle Aspekte rund um Make-or-Buy besprechen wir in dieser Episode. Einen wunderschönen guten Abend. Also wir haben ja letztes Mal besprochen in der letzten Episode, wie man sich so Firmen aussucht und was man so in den Interviews fragen kann. Und Andi hat sich ja beschwert, dass wir jetzt ein halbes Karriere-Podcast sind und kein Tech-Podcast mehr.

Willkommen zu einer neuen Episode des Engineering Kiosks. Produktiver zu werden wünscht sich vermutlich so ziemlich jeder, auch wir. Und darum sprechen wir heute über unser Zeitmanagement. Warum Andy sogar durch sein Zeitmanagement befördert wurde, wie Zeitmanagement helfen kann, mehr Vertrauen aufzubauen, wie man seine Produktivität erhöhen kann, aber auch wie die Methoden wie Getting Things Done oder Inbox Zero Produktivität bremsen können. Und natürlich unsere Tipps, was wir so aus den letzten Jahrzehnten Zeitmanagement für uns mitgenommen hat.

Willkommen zu einer neuen Episode des Engineering Kiosks. Asynchrone Programmierung hilft bei der idealen Auslastung von Ressourcen wie CPU und I.O. Und seit Corona sind beinahe alle IT-Arbeitsplätze auch asynchron geworden. Doch werden dabei auch die Ressourcen ideal ausgelastet? Alles das klären wir in dieser Episode neben dem richtigen Tooling und den nötigen Skills für asynchrone Kollaboration. Von Zeichentools über Design-Documents bis hin zu den Schreib-Skills. Einen schönen guten Abend, Andi.

Herzlich willkommen zur Episode 15 vom Engineering Kiosk. Heute dreht sich alles um Kommentare im Quelltext und Git-Commit-Messages. Wie sinnvoll sind Kommentare? Ist der Code nicht selbsterklärend? Kann eine gute Namensgebung von Variablen und Funktionen Kommentare ersetzen? Sind To-Do-Kommentare im Code okay oder sollten diese doch eher ein Ticket im Bug-Tracker sein? Wie hilfreich sind strukturierte Git-Commit-Messages? Und lieben oder hassen wir Merge Comets? Und was hat eigentlich die Kunst von Fynn Kliemann mit der Visualisierung von Git Branches zu tun? All das und noch viel mehr klären wir in der kommenden Stunde. Viel Spaß! Ich komme gerade frisch vom Sport, energiegeladen und wollte dich einfach mal fragen, als sportlicher Wanderer, der du ja bist, und Österreicher, weißt du eigentlich, warum man Sport macht?

Eine neue Woche bedeutet auch eine neue Episode vom Engineering Kiosk. Heute dreht sich alles um Code Reviews, eine Hassliebe. Jeder will schnelles Feedback, doch niemand hat Zeit dafür den Code von anderen durchzugucken. Dennoch ist es eine wichtige Komponente im Alltag jedes Software Engineers, egal ob Junior, Senior oder Staff Engineer. Doch wie sehen eigentlich gute Code Reviews aus? Was gehört hinein? Was bleibt besser draußen? Wie viele Reviewer machen Sinn? Wie geht man mit Nitpicking, Kommentaren und Gatekeeper um? Und allgemein, zieht dieser zusätzliche Schritt nicht die Performance des Teams runter und ist sowieso Overhead? Diese und andere spannende Fragen, wie zum Beispiel, was hat Markus Söder, Faultiere, Service Level Agreements, Stullen und Kniffen mit Code Reviews zu tun? All das klären wir in dieser Episode.

Hey, wir sind's wieder. Wolfgang und Andi vom Engineering-Kiosk mit einer neuen Episode. Jeder von uns versucht den perfekten Code zu schreiben. Bugfrei, super performant und hochverfügbar sowieso. Doch früher oder später kommt es unausweichlich zu der Situation, dass ihr das Produktionssystem in irgendeiner Art und Weise abgeschossen habt. Und dabei ist es völlig egal, ob ihr Junior Software Engineer seid, die erste Version von Amazon S3 geschrieben habt oder euer Name Linus Torvalds ist. Wenn es noch nicht passiert ist, wird es bald passieren. Euer Code erzeugt einen Inzident. Ein Systemausfall. Nix geht mehr. So oder so ähnlich ist das, wenn ich versuche zu kochen. Ich bin nicht besonders gut darin, mache es aber gerne und ich weiß, dass irgendwann eine Pfanne brennen wird. Und dann kommt die Feuerwehr. Also hoffentlich. Und genau das sind unsere beiden Themen für die heutige Episode. Hä? Beide Themen? Du hast doch nur von Production Outfitters gesprochen. Ja und Nein. Heute klären wir die Frage, was das Internetmanagement in IT-Systemen und Cloud-Systemen von den Einsätzen der Feuerwehr lernen kann, was gleich läuft, wo die Unterschiede liegen und wie man aus solchen, doch recht doofen Ereignissen lernen kann, um das System zu stabilisieren. Und das ist nicht nur eine Folge für die Leute aus dem Infrastrukturbereich, sondern auch für Software Engineers, Product Owner und allen anderen. Springen wir direkt rein und los geht's.

Episode 18 vom Engineering Kiosk. Hallo und willkommen. Wir freuen uns, dass ihr wieder mit uns am Start seid. Heute geht es um ein Thema, was für einige Leute lästig ist, nur Arbeit und Overhead erzeugt und für andere super sinnvoll, weil es ihnen eine Richtung und klaren Fokus gibt. Wir sprechen über Ziele und Performancemetrik. Nicht im technischen Sinne, wie zum Beispiel Antwortzeit in eurer App, sondern im Kontext von euch als Mitarbeiter und eurem Team. Solltet ihr Ziele mit eurem Vorgesetzten definieren? Oder ist das purer Blödsinn? Was bringt euch das? Und wie können eure individuellen und Teamziele überhaupt aussehen? Wie sinnvoll ist das Ganze aus Managementsicht? Müssen diese Ziele alle im mathematischen Sinne messbar sein? Oder reicht da vielleicht auch das klassische Bauchgefühl? Schwierige Fragen und noch mehr Meinungen. Es ist eine wilde Episode, wo wir viele verschiedene Dinge wie Objective und Key Results, Gehaltsverhandlungen, Scrum, Velocity, das Devops Vestrum Model sowie Dora Metriken zusammenschmeißen. Viel Spaß beim Kursen.

Willkommen in eurem Lieblingskiosk. Thementechnisch sind wir in dieser Episode Wiederholungstäter und mal wieder mit einem technischen Thema. Wolfgang ist mir so lange auf die Nerven gegangen, bis er wieder über sein Wunschthema sprechen darf, Datenbanken. Wir knüpfen nicht direkt an Episode 8 an, wo wir bereits über Datenbanken gesprochen haben, sondern fangen ganz vorne an, bei hierarchischen Daten. Wir klären, was eine Datenbank ist, wo die Unterschiede zu normalen Dateien sind, ob objektorientierte Datenbanken noch in Benutzung sind, was eigentlich spaltenorientierte Datenbanken sind und wieso die gerade im analytischen Umfeld so viel Anklang finden. Weiterhin geht es auch um die Fragen, ob Redis nur eine Hashmap mit IP-Interface, MySQL nur ein Adressbuch mit SQL-Schnittstelle und NoSQL wirklich nur für Kinder ist. Viel Spaß mit dieser Episode und los geht's mit Kürbiskernen.

Willkommen bei einer neuen Episode des Engineering Kiosks. Habt ihr gewusst, dass von allen, die 2010 einen Job begonnen haben, nach zwei Jahren nur mehr 22% dieselbe Beschäftigung hatten? Auch in der IT- und der Tech-Welt werden Firmenwechsel immer häufiger und oft wird vergessen, wie viel Potenzial im Offboarding und Onboarding-Prozess steckt. Wir besprechen in dieser Episode, wie man als Mitarbeiterin oder Mitarbeiter professionell eine Firma verlässt, auf was man achten sollte und wie man den Einstieg in eine neue Firma beschleunigen und verbessern kann. Dieses Thema betrifft aber natürlich auch Firmen und ManagerInnen, denn auch von dieser Seite gilt es für einen reibungslosen Ablauf einiges zu beachten.

Episode 21 vom Engineering-Kiosk. Heute mal ne richtige Kiosk-Folge. Wolfgang und ich sprechen über ein Thema, wo wir beide wirklich wenig Ahnung von haben. Frontend. Das ganze machen wir nicht freiwillig, sondern eher in eigener Sache. Nach knapp 6 Monaten und 20 Episoden haben wir eine eigene Webseite am Start. Ich freue mich wie Bolle, ich sag's euch. Gebaut mit einem Static-Side-Generator. Und das sind auch schon unsere Themen. Warum denken wir, dass wir eine eigene Webseite brauchen? Warum hat das ganze sechs Monate gebraucht? Wie sieht der technische Unterbau aus und welche Hipster-Technologie wurde verwendet? Was ist eigentlich ein Static Site Generator und wozu ist er gut oder auch schlecht? Bei all dem klären wir auch noch, was die Toten Hosen, die Broilers und Rammstein mit Static Site Generators zu tun haben, warum Österreich richtig gut im Marketing ist und ob Buhl der neue Kneipensport wird. Wir springen direkt rein. Viel Spaß! Was ist das letzte was du gelernt hast Wolfgang?

Ni Na No Angels. Nee, das war falsch. Die deutsche Girlgroup, die im Jahr 2000 aus der ersten deutschen Staffel der Castingshow Popstars hervorging, ist auch super, aber um die geht's heute nicht. Heute geht's um Ni Na No SQL. Und das Jahr 2000 stimmt auch. Zumindestens circa, wenn es um die Geburtsstunde des Begriffs NoSQL geht. In dieser Episode ist Wolfgang wieder voll in seinem Element, Dozent für Datenbanken. Und dabei fallen so viele Buzzwords, dass wir eine hohe Chance auf ein Bingo haben. ACID, BASE, EVENTUAL CONSISTENCY, FACEBOOK, FLICKR, SAP, COMMODITY HARDWARE, REDDIS, NEO4J, KASSANDRA, MEMCASH, WHITE COLUMN STORE und und und. Haltet die Bingo-Karten bereit, wir legen los. Und zwar mit einer der schlechtesten Themenüberleitungen, die ihr je gehört habt. Viel Spaß! Wolfgang, du hast kein Auto, oder?

Schaltest du das Licht noch selbst oder automatisierst du schon? So oder so ähnlich könnte der Werbeslogan für diese Episode vom Engineering-Kiosk lauten. Nehmt euch mal ein paar Sekunden und schaut euch gerade um. Wie viele smarte Devices habt ihr ganz in eurer Nähe? Na, was habt ihr da so? Ein Handy? Eine Smartwatch? Eine Amazon Alexa? Ein Staubsauger-Roboter? Ein E-Auto? Eine Bluetooth-Audiobox? Oder ein Smart TV? Wenn mindestens eine Sache davon zutrifft, heiße ich euch im Home Automation Business willkommen. Und darum geht es auch in den nächsten Stunden. Wir geben euch einen leichten Einstieg in das Thema der Home Automation und teilen unsere Erfahrungen der letzten Jahre und worauf ihr achten solltet. Protokolle, Box of Shame, leere Batterien und Wohnungsgrundrisse in China. Viel Spaß beim Hören!

Hand aufs Herz. Wer hat sauber und up-to-date dokumentiert, wie alle Infrastrukturkomponenten von Router bis zur virtuellen Maschine zusammenspielen? Wer kann nach einem Hackerangriff bei Knopfdruck magisch die gesamte Infrastruktur in einem anderen Land in der Cloud wieder hochfahren? Das Zauberwort dafür heißt Infrastructure as Code. Willkommen zu einer neuen Episode im Engineering Kiosk, in der ich genau darüber mit unserem DevOps-Spezialisten Andy sprechen werde. Wir klären, warum Andy gar nicht Spezialist genannt werden will, was der Unterschied zwischen Configuration Management und Infrastructure Orchestration ist und welche großen Vorteile es mitbringt, sowohl für kleine Side-Projects als auch für große Unternehmensinfrastrukturen.

In der Tech-Industrie geht zur Zeit recht viel ab. Überall liest man von Massenentlassungen und Stopp von Neueinstellungen bei großen Tech-Firmen. Generell ne Scheiß-Situation. Das Ganze hat uns unter anderem zum heutigen Thema gebracht. Interviews aus der Sicht des Bewerbers. Sei doch mal ehrlich, wann hast du das letzte Interview gemacht, wo du rausgegangen bist, dir selbst auf die Schulter geklopft hast und gesagt hast, wow, das war ne Mega-Leistung? Bei vielen ist das gegebenenfalls schon etwas her oder man hat sich eher einen abgestammelt und gedacht, fuck, wieso habe ich Thema X nicht erwähnt. In dieser Episode sprechen wir darüber, wie man sowas vermeiden kann, geben Tipps für souveräne Antworten auch bei schwierigen Interviewfragen und klären, warum man Interviews führen sollte, wenn man gar keinen Job sucht. Wir starten jedoch erstmal in Portugal. Viel Spaß und los geht's. Wolfgang, du warst ja jetzt gerade anderthalb Wochen in Portugal und hast ja die Sonne auf deine Plauze scheinen lassen. Und da wir ja hier auch einen kulturellen Anspruch haben zwischen der deutschen Kultur und der österreichischen Kultur, würde ich jetzt gerne mal einen Auszug aus der portugiesischen Kultur hören von dem einen Ding, was dich entweder beeindruckt hat oder überrascht hat oder wo du dir gedacht hast, what the fuck, was geht denn hier ab?

Your English is not the yellow from the egg? Warum ist Englisch für uns Deutschsprachige immer noch eine schwierige Sache? Sogar wenn wir in der IT-Branche arbeiten und vermutlich tagtäglich zahlreiche englische Webseiten besuchen. In dieser Episode sprechen wir über die englische Sprache und internationale Teams. Welche Hürden wir deutschsprachig mit der englischen Sprache haben und wie wir diese überkommen können. Welche Vor- und Nachteile die Zusammenarbeit in einem internationalen Team hat und wie sich das Ganze aktuell nach der Pandemie in einem Remote-Setup auswirkt. Ganz nebenbei erklären wir noch, was der brasilianische Amazonas und deutsche Aldi-Kassierer damit zu tun haben. So if you are ready, let's start! Ich würde diese Episode gerne mal starten mit einem kleinen Dankeschön, weil wir so viele E-Mails und Rückmeldungen bekommen von Hörerinnen und Hörern, die sich bedanken für die Folgen, die wir machen und auch so Folgen wie zum Beispiel die Home-Automation-Folge, die einem Hardcore-Developer, einem Kollegen von uns scheinbar viel gebracht hat, der in seinem Van lebt und dort ein Remote-Developer-Leben führt. Und genau solche Kommentare motivieren uns eigentlich immer, dran zu bleiben. Aber eines der schönsten Kommentare, die wir kürzlich bekommen haben, war folgendes. Andi, lass dich mal den ersten Teil lesen. Lies mal den ersten Teil bitte unseren Hörerinnen vor.

Was lösen die folgenden Stichwörter für Gefühle bei dir aus? Optimierung von Algorithmen, Zeitkomplexität, Big O Notation, ASMR und Gänsehaut? oder Schlafstörungen und Panikattacken. Wenn es die Angst ist, dann versuchen wir dich mit dieser Episode zu therapieren. Denn darum geht es heute. Wir behandeln dieses Thema von der praktischen Seite. Was ist die Big-O-Notation? Wo findet man diese in der Praxis? Und hat das Ganze bei Cloud-Computing, schnellen CPUs und schier unendlichem RAM eigentlich noch eine Relevanz? Das und noch viel mehr in der nächsten Stunde. Doch zuerst starten wir mit Hörer-Feedback zur englischen Sprache und deutscher Grammatik. Und los geht's!

Jeder von euch hat bestimmt schon mal von lokalen Meetups oder Usergroups und Konferenzen gehört. Vielleicht habt ihr sogar schon mal welche besucht. Beides sind wichtige Bestandteile der Community und Plattformen für den Wissensaustausch. Firmen sponsoren sogar Meetups und geben Mitarbeitern sogenannte Konferenzbudgets. Doch habt ihr euch eigentlich schon mal gefragt, wie es hinter den Kulissen aussieht? Was bedeutet es eigentlich, jeden Monat ein Meetup auf die Beine zu stellen? In dieser Episode gebe ich, Andi, mal einen Einblick in die Organisation eines Meetups, was die Hochs und Tiefs sind und auch, wie ihr mit eurem eigenen Meetup starten könnt. Viel Spaß!

Schuftest du noch oder automatisierst du schon? Das ist die Frage, die uns in dieser Episode begleitet. Und damit willkommen zu einer neuen Episode vom Engineering Kiosk. Heute geht es um Automatisierung, im Speziellen um die Automation und Workflow Engine GitHub Actions. Wir klären, was das Ganze ist, welche Möglichkeiten es zur Automatisierung neben Continuous Integration noch so gibt und präsentieren diverse Beispiele aus der Praxis. Viel Spaß und los geht's!

Wenn ich euch in der Nacht aufwecke und frage, wie sieht euer Recruiting-Prozess aus? Könnt ihr es beantworten? Habt ihr einen Recruiting-Prozess? Wer entscheidet bei euch, ob jemand eingestellt wird und wie kommt diese Entscheidung zustande? Recruiting ist doch das Wichtigste in der Firma, oder? Und damit willkommen zu einer neuen Episode im Engineering-Kiosk, in der wir genau diese Fragen klären und aus unseren vielen Jahren IT-Recruiting erzählen. Und nebenbei versuchen wir auch noch herauszufinden, ob man False Positives oder False Negatives optimieren sollte. Los geht's. Rolfgang.

Wir suchen Andis Leadership-Style. Und dafür muss er durch die Interviews fragen, mit denen ich auch meine Nachfolger gesucht habe. In Andis Bewerbungsgespräch treffen wir nicht nur auf Straßenlampen, die an Jenkins angeschlossen sind, sondern sprechen auch über CV-Driven Development, wie man langweilige Projekte für das Team interessanter gestalten kann und wie man die Innovationskraft zurück in ein Team bringt. Aber vor Andis Interview starten wir zuerst mit künstlicher Intelligenz und Wikinger-Schach. Hast du schon unser geniales Episoden-Image gesehen von der letzten Episode?

Nerdy gilt in unseren Kreisen ja schon als Kompliment. Aber wie cloudy bist du eigentlich? Und damit willkommen zu einer neuen Episode des Engineering Kiosks und gleichzeitig zu einem kleinen Streitgespräch zwischen Andi und mir. Denn ist Cloud Native nun besser oder schlechter? Und wie sieht es denn mit der guten alten Ein-Server-Strategie eigentlich aus? Über Lambdas Cloud Functions, Skalierung out-of-the-box, Vendor-Logins und der Cloudy-Preisfalle versuchen wir uns an eine Antwort heranzutasten. Aber bevor wir loslegen, erklären wir noch, wie man auf Reddit, auf ganz österreichisch, sich ordentliche Watschen abholen kann. Also eigentlich wollten wir ja heute über ein sinnvolles Thema sprechen, aber Andi ist gerade so gepisst, weil er auf Reddit eine kassiert hat und das muss jetzt unbedingt loswerden. Also jetzt einmal alle auch mal Andi, aber erklär mal, was passiert ist.

Kennt ihr die auch? Ja, genau die. Die eine Person im Unternehmen, die auf keinen Fall kündigen darf. Denn sonst ist der Ofen aus. Das ganze Wissen verloren. Aber Moment. Wir machen doch Knowledge Sharing in der Firma. Das ist doch sogar ein Schwerpunkt bei uns. Heißt es zumindestens immer. Und genau darum dreht sich diese Episode. Und damit willkommen im Engineering Kiosk. Dass der Dauerbrenner Knowledge Sharing ein heißes Eisen ist, wissen wir alle. Aber wie können wir den Buzz-Faktor erhöhen und was gibt es für Möglichkeiten, Wissen zu transferieren und zu teilen? Muss jeder im Team alles wissen und übernehmen können? Wobei kann Mob-Programming helfen? Was sind Gilden und kann man eigentlich zu viel lernen? All das und noch vieles mehr nach einer kurzen Runde kleineren Zeiten.

Heute geht es um ein Evergreen-Thema, über das nicht viele Leute sprechen. Gehälter in der Softwareindustrie. Im Speziellen um Gehaltsbausteine, wie sechsstellige Gehälter aufgebaut sind, ob diese gerechtfertigt sind und wie kleinere Firmen mit der Entwicklung in der Industrie umgehen. Eigentlich wollten wir ein neues Format, die gemischte Tüte, ausprobieren. Doch wir haben uns ganz einfach verquatscht. Wie, was, warum, hört ihr in den nächsten 50 Minuten. Los geht es jedoch mit dem Feedback-Cycle vom Podcasting. Viel Spaß mit dieser Episode. Eine Sache, Wolfgang, die mich irgendwie beim Podcasten stört, ist, dass der Feedback-Cycle so super lang ist. Weil in der Regel macht man ja keine Live-Podcasts, sondern man nimmt einen Podcast auf, schneidet vielleicht nochmal ein Intro davor, ein bisschen Musik drunter und dies und das und dann hat man in der Regel ja so ein Scheduling-Intervall, dass man wie zum Beispiel wir jeden Dienstagmorgen die neue Episode ruft. Und das bedeutet natürlich auch, dass man in der Regel vorher aufnimmt. Also wir nehmen in der Regel nicht am Montagabend auf oder am Dienstagmorgen, sondern vielleicht eine halbe Woche oder eine Woche davor. Das bedeutet jetzt also eigentlich, dass der Feedback-Cycle von unseren Hörerinnen und Hörern schon so ein bisschen später ankommt, beziehungsweise wir das Feedback später besprechen können. So. Und vor zwei Wochen haben wir eine Episode rausgehauen, die hieß, Wie Claudi bist du?

Wer liest heutzutage eigentlich noch IT-Bücher? Wo wir doch alle Digital Natives sind, es YouTube-Videos zu jedem Thema gibt und man alles googeln kann und fünf Blogartikel findet. Und doch gibt es zu jedem IT-Thema mindestens ein Fachbuch. Doch habt ihr euch eigentlich mal gefragt, wie es ist, ein IT-Fachbuch zu schreiben? Was da wirklich dahinter steckt und ob man dadurch nicht doch reich werden kann? In seinen jungen Jahren hat Wolfgang ein Buch über MySQL geschrieben. In dieser Episode geht es um seine Erfahrungen und ob er es nochmal tun würde. Viel Spaß! Wie gut würdest du dich einschätzen in deinen Schreibskills? Also ich meine wir sprechen da öfter darüber, dass ich ein mega Fan davon bin Schreibskills zu fördern und oft delegierst du mir ja auch Arbeit, weil du denkst ich schreibe besser, was ich bezweifle. Das bedeutet ich muss öfter Tweets schreiben oder ähnliches. Und deswegen würde ich gerne mal deine Selbstreflexion, deine Selbsteinschätzung haben von einer Skala von 0 bis 10, wie du dich denn in Schreibskills bewerten würdest. Wo 0 ist, ich kenne das Alphabet und 10 ist, ich schreibe für mein Leben gern und denke, dass ich auch sehr gut daran bin.

Sentry Datadogs, Plunk, Elasticsearch, Logstash, Kibana, OpenSearch, Elastic Cloud, Ivan, Fluentd, S3, Athena, Prometheus, Victoria Matrix, InfluxDB, M3, Grafana, PromQL, OpenGenie, Jäger, Sipkin, OpenTracing und OpenTelemetry. Und damit willkommen zu einer neuen Episode des Engineering-Kiosks. Voll mit Engineering-Porn. Denn während ich an die Frage, wie man denn heute ein Projekt richtig überwacht und Monitoring gut aufbaut, behandeln wir all diese Technologien. Aber wir klären auch, was es mit Tracing, Observability, Metricing und Alerting auf sich hat. Also rein in die Technologienschlacht des Monitorings.

Willkommen zur Episode 39 vom Engineering Kiosk. Normalerweise haben wir ein Thema, was die Episode bestimmt. In dieser Episode spielen wir etwas mit dem Format und beschäftigen uns mit vier Themen, die uns als Userfragen zugespielt wurden. Es geht dabei um den Unterschied von Software Developer und Software Engineer, ob alles, was auf GitHub gehostet ist, automatisch Open Source ist, ob wir Git wirklich so dezentral nutzen, wie es gedacht ist und wie unser Home Office so aussieht. Viel Spaß dabei! Alle guten Dinge sind zwei, oder? Und deswegen versuchen wir... Moment, bei euch.

Wie sieht das bei dir eigentlich aus? Fünf Jahre Berufserfahrung oder doch nur fünf mal ein Jahr Berufserfahrung? Und damit willkommen zu einer neuen Episode zum Engineering Kiosk, in dem wir über den Begriff Senior Entwickler sprechen. Was bedeutet der Begriff für uns? Was sind T-Shaped Skills? Wie wird man zum Senior? Und warum ist Kommunikation dabei so wichtig? Wir sprechen auch über die wichtige Pro-Aktivität, die du jetzt gerade vermutlich zeigst, sofern dich halt niemand zum Zuhören zwingt. Und nebenbei klären wir noch, warum man ein Problem hat, wenn man der Klügste im Raum ist und warum wir Tiroler ein hartes und ein weiches Tee haben. Also los geht's. Oder Moment, Moment. Noch als kleine Motivation. Am Ende verraten wir beide unserem Pro-Tipp, wie man möglichst einfach in Richtung Senior wachsen kann. Also bis zum Schluss hören. Aber jetzt wirklich rein in die Episode.

Willkommen zu einer neuen Episode vom Engineering Kiosk. Wer von euch hat schon einmal von der Sicherheitslücke SQL Injection gehört? Wahrscheinlich ein Großteil von euch, denn dies ist doch ein alter Hut im Bereich Web Security, oder? Auch im Jahr 2022 ist dies immer noch einer der Top Sicherheitslücken, die das Internet in Atem hält. In dieser Episode schauen wir uns an, wie SQL Injections eigentlich entdeckt wurden, was der Unterschied zwischen einer Blind SQL Injection, einer Time-Based oder einer Out-of-Band SQL Injection ist und ob Fuzzing Testing die Lösung all unserer Probleme ist. Viel Spaß!

Wie findet man heutzutage einen Job in einer internationalen Firma? Genau, durch Over-Engineering. Man setzt sich also als zockender Informatiker hin und schreibt für Counter-Strike einen Lexer und einen Barser in Go, um seine Freunde auszuspionieren. Klingt komisch? Habe ich mir auch gedacht. Und darum habe ich mir die Geschichte von Andy ganz genau erklären lassen. Ich sag's euch, parade Beispiel, wie man als Nerd Probleme begegnet, was man aber dabei lernen kann und worum Gaming und LAN-Partys vielleicht nicht nur vergeudete Zeit sind.

Willkommen zu einer neuen Episode vom Engineering-Kiosk. Heute geht es wieder um das Thema Cloud. Im Speziellen um die Frage, wann ist die Cloud und wann On-Premise, also der Betrieb von eigenen Servern, für dich und deine Applikation die bessere Wahl? Wir diskutieren diese Frage anhand eines Blogposts von dem Ruby & Whales Gründer David Heinemeier-Hansen, worin erklärt, warum er mit seinen Produkten Basecamp und Hey! einem E-Mail-Service die Cloud verlässt und wieder zum Selbsthosting via On-Premise-Data-Centern wechselt. Bevor es losgeht, noch eine kleine Bitte. Falls ihr uns supporten wollt, lasst uns doch bitte eine Bewertung auf eurem Podcast-Service eurer Wahl da und empfiehlt diesen Podcast euren Kollegen und Kolleginnen sowie Freunden. Vielen Dank dafür und nun viel Spaß! In der letzten Episode haben wir über Lexapasa und Counter-Strike gesprochen. Da ging es natürlich auch ein bisschen um Computerspiel und ich habe mich gefragt, wie war eigentlich deine Historie zu Computerspielen und inzwischen habe ich gelesen, es gibt Monkey Island, das neue Monkey Island, nun für Linux. Meine Frage, müssen wir den Podcast jetzt stoppen, weil du mit Rätsellösen beschäftigt bist?

Willkommen zu einer neuen Episode vom Engineering Kiosk. Cool, dass du wieder dabei bist. Heute geht es um das Thema Leadership. Im Speziellen um die Dynamiken innerhalb eines Teams. Noch spezieller um die fünf Phasen, die ein Team auf ihrem Weg zu einem hochperformanten Team in der Regel durchlebt. Welche Phasen gibt es? Was fühlen die Teammitglieder in diesen Phasen und welche Bedürfnisse entstehen? So wie die Frage, welcher Leadership-Style pro Phase benötigt wird. Wenn du jetzt denkst, ach, ich bin ja gar nicht in einer Leadership-Position, sondern nur Software-Engineer oder Individual-Contributor, schalte nicht ab! Das Thema ist nicht nur für Engineering-Managerinnen und Engineering-Manager relevant, sondern auch für Senior-Engineers, Projekt-Manager oder ähnliche Positionen bzw. für Leute, die auf dem Weg dorthin sind. Wir denken auch, dass jedes Teammitglied verantwortlich für die Kultur innerhalb eines Teams ist. Vielleicht nimmst du ja was mit, was du in nächster Zeit anwenden kannst. Und nun, viel Spaß!

Hey, cool, dass du bei einer weiteren Episode vom Engineering Kiosk dabei bist. Aus der DevOps und Cloud-Ecke kennen wir alle Dashboards mit technischen Metriken wie Response-Zeit oder Memory-Usage. Aber habt ihr auch eine ähnliche Einsicht in eure Side Projects? Zum Beispiel, wie viele User ihr habt, wie viele Leute sich im letzten Monat eingeloggt haben oder auch komplexere Businessmetriken? In dieser Episode sprechen wir über datengetriebene Entscheidungen, Dashboards und Analytics und wie diese heutzutage ohne viel Aufwand umgesetzt werden können. Denn wofür man früher ein ganzes Team benötigt hat, reicht heute ein guter Open Source Deck. Dabei erklären wir auch das warum, wie die Architektur aussehen kann, ob jeder nun SQL lernen muss, wie schöne Dashboards in Minuten erstellt werden können und ob das gute alte Bauchgefühl für Entscheidungen überhaupt noch eine Relevanz hat. Viel Spaß!

Docker und Container, die Buzzwords der letzten Dekade. Und wo es um Buzzwords geht, geht es auch um ein sich schnell entwickelndes Ökosystem. Grund genug, mal zwei Schritte zurückzugehen und sich zu fragen, was ist eigentlich das Warum hinter Docker und wie lautet eigentlich das ursprüngliche Problemstatement von Solomon Hykes und seinem Team? Um diese zwei Fragen geht es in dieser Episode. Natürlich bleiben andere Buzzwords wie Immutability, idempotenz Copy-on-Write, LXC, LibContainer und Chainshoot nicht unerwähnt. Wenn du dir nun denkst, ich nutze Docker jeden Tag, ich weiß doch schon alles, gib uns mal ne Chance. Es wird kein So-nutzt-du-Docker-Audio-Tutorial, sondern eher um den Gedanken dahinter. Vielleicht nimmst du das ein oder andere Quäntchenwissen doch noch mit. Und somit viel Spaß. Wolfgang, soviel ich weiß, bist du ein sehr belesener Mann und hast auch schon die Welt bereist. Zumindest hattest du das mal vor, bis dieses Corona kam. Meines Wissens nach hast du deinen Vollzeitjob gekündigt und ich glaube offiziell nennt man das ein Cervetical. Und dann hast du begonnen, die Welt zu bereisen bzw. war das dein Ziel? Ist das korrekt?

Mein Team zieht nicht an einem Strang. Wir arbeiten in die falsche Richtung. Kennst du? Schon einmal gehört? Dann eine kurze Frage. Wie lautet die Vision und Mission deiner Firma? Du hast eine Antwort. Okay, nächste Frage. Wie lautet die Vision und Mission von deinem Team, in dem du tagtäglich viele Stunden verbringst? Du hast eine Antwort oder hältst du das ganze Thema für esoterik und denkst eigentlich nur Geschleichte, alle die eine Vision haben sollen besser zum Arzt. Aber genau darum dreht sich die Episode. Wir klären, was eine Vision und eine Mission ist, warum diese wichtig für eine Firma und auch für dein Team ist, stellen uns die Frage, warum wir eigentlich genau für diese Firma arbeiten, was für einen Effekt die Vision und Mission auf dein Team haben kann, ob es auch ganz ohne funktioniert und wie man das ganze Thema angehen kann. Also los geht's.

Container, Kubernetes und Runtimes. Heute machen wir deine Buzzword-Bingo-Karte voll. Willkommen zu einer neuen Episode vom Engineering Kiosk. In Episode 46 haben wir uns mit dem Thema Docker und Container beschäftigt und darüber gesprochen, welches Problem Docker eigentlich löst. Heute gehen wir mal eine Ebene tiefer und klären, Welche Teile aus Docker herausgetrennt wurden, um für das erweiterte Container-Ökosystem nützlich zu sein? Was eine High-Level-Container-Runtime ist und was für Verantwortlichkeiten diese hat? Wie Kubernetes mit einer solchen Runtime kommuniziert? Ob es verschiedene Container-Runtimes gibt? Ob Kubernetes überhaupt Docker unterstützt? Und wir schmeißen Begriffen wie CNCF, OCI, CRI, SHIM und Co. um uns. Wenn du mit Docker noch nicht so viel zu tun hattest, empfehlen wir dir zuerst Episode 46 zu hören. Die heutige Episode kann als Folge 2 davon angesehen werden. Also, Bingo-Karten raus und los geht das Spiel.

Kennt ihr Software Repository Mining? Wenn nicht, verwendet ihr es vielleicht aber trotzdem schon. Und damit willkommen zu einer neuen Episode im Engineering Kiosk, in der wir in die Metawelt der Softwareentwicklung eintauchen. Andi, der bereits vor Jahren seine Bachelorarbeit zu diesem Thema geschrieben hat, erklärt uns, wo wir heute schon Software Repository Mining einsetzen und welche Informationen in unseren Git Histories versteckt liegen. Denn diese versteckte Information kann uns schon heute im Programmieralltag helfen, aber auch in Zukunft die Basis für mehr Intelligenz im Entwicklungsprozess oder dem Co-Pilot der Zukunft sein. Neben der aktuellen Forschung erklären wir aber auch, wie ihr sofort mit dieser Zukunft für euer Projekt loslegen könnt. Also ab, zurück in die Zukunft zu Andis Bachelorarbeit. Straßen?

Leute im Tech-Bereich werden oft als Knowledge-Worker bezeichnet. Und es gibt auch noch diesen Mythos, dass im Team jeder alles wissen muss, damit jeder alles übernehmen kann. Bis heute bin ich mir gar nicht sicher, ob dieser Zustand jemals erreicht wurde. Dennoch ist das Teilen von Wissen wichtig. Schon allein, um sich selbst als Blocker aufzulösen oder den sogenannten Boost-Faktor nach oben zu treiben. In dieser Episode machen wir mal eine kleine Tour durch die verschiedenen Knowledge-Sharing-Formate. Hackathons, Coding-Challenges, interne Konferenzen und Guilds, Bookclubs und Co. Was bringt wirklich was? Wie viel Aufwand ist es, sowas am Leben zu halten? Wer sollte das organisieren? Und wie sieht's aus mit der Balance zwischen Contributor und Information-Lurker? Und was passiert eigentlich, wenn solche Events zu inflationär genutzt werden? Wir teilen unsere Erfahrungen und worauf es besonders ankommt, wenn du etwas ähnliches in deiner Firma starten möchtest. Los geht's!

Wir EntwicklerInnen lieben Herausforderungen. Endlich gibt es ein neues, ordentliches Problem zu lösen und wir können eine Software dafür bauen. Natürlich prüfen wir als erfahrene Entwickler zuallererst, ob es vielleicht nicht schon eine gute, fertige Lösung am Markt gibt. Wir erkennen dann aber recht schnell, unser Problem ist einzigartig. Die Standardlösung ist viel zu unflexibel und zu komplex. Und ich brauche doch nur 20% der Funktionen. Das schaffen wir im Team schneller und billiger. Also los, auf zum Coden. Ich würde gerne sagen, diese Worte kommen nicht aus meinem Mund, aber ich habe sie genau so schon gesagt. Falls ihr diese Situation auch kennt, wir sprechen in dieser Episode, warum dieses Vorgehen so gefährlich ist und wie man es auch vermeiden kann. Also los geht's, ganz ohne Coding.

In vielen Diskussionen geht es darum, welche Lösung die bessere ist und einen größeren Impact hat. Viele Entscheidungen werden aus dem Bauch heraus getroffen, obwohl gesagt wird, dass wir datengetrieben arbeiten. Doch Daten und Ergebnisse sind oft nicht vorhanden. Experimente wie A-B-Tests und ein passendes Mindset können in solchen Situationen helfen. Hypothese aufstellen, Experiment umsetzen, Ergebnis evaluieren und das Ganze wiederholen. Klingt einfach. Experimentelles Mindset? Check! Doch wie macht man sowas denn im Detail? Auf welche und wie viele Metriken schaut man während eines Experiments? Wie lange darf es dauern? Kann ich das Ganze auch mit wenig Kunden und Traffic umsetzen? Was sind die typischen Fehler beim AB-Testing? Und was ist eigentlich ein P-Wert, eine statistische Signifikanz, eine Power-Analyse, ein AA-Test oder der Priming-Effekt? Das und noch viel, viel mehr in dieser Episode mit unserem Gast Dr. Philipp Monreal. Viel Spaß!

Wenn man viele Entwicklerinnen fragt, welche Programmiersprache sie als nächstes gerne lernen wollen, fällt oft dieselbe Antwort. Rust. Man könnte schon fast von einem kleinen Hype sprechen. Projekte auf Gitter prahlen damit, dass diese mit Rust geschrieben wurden und jede zweite Case Study einer großen Tech-Firma hat etwas mit Rust zu tun. Doch was ist dran am Hype? Ist es nur Marketing oder steckt wirklich der Knaller der nächsten 40 Jahre dahinter? Ist hier wirklich alles Gold, was glänzt? Genau darüber sprechen wir mit Matthias Endler. Matthias ist von Anfang an bei Rust dabei und weiß, wovon er redet. In dieser Episode klären wir, welches Problem eigentlich von Rust gelöst wird, machen einen Deep Dive in die Kernkonzepte der Sprache, werfen einen Blick auf die Lernkurve von Rust, schauen uns an, wie die Sprache eine gewisse Rückwärtskompatibilität gewährleistet und noch vieles, vieles mehr. Bleibt dran, los geht's!

Ich habe ja einmal einen 1. April-Artikel verfasst, nachdem Oracle MySQL übernommen hat, so als Nachruf auf MySQL. Jetzt wirst du zur Grabe getragen in diesem Sinne. Wow, ich habe mich getäuscht. Das Beste, was MySQL jemals passiert ist, ist die Übernahme durch Oracle. Das alles oder nichts ist die Idee, dass wenn man ein ORM verwendet, dass man alles mit dem ORM machen muss. Und die ist eine Blödsinn meiner Meinung nach. Selbst wenn man heutzutage in die Hibernet-Dokumentation reinschaut, dann steht da drinnen, ja das ist ein Tool und das verwendet man neben SQL.

Früher waren viele Applikationen eine Blackbox, besonders für die Ops aka Betriebsabteilung. Dann fing das Logging an. Apps haben Loglines geschrieben, zum Beispiel wann die App fertig hochgefahren ist oder wenn etwas schiefgegangen ist. In einer Art und Weise haben durch Logs die Devs angefangen mit den Ops Leuten zu kommunizieren. Irgendwann später gab es Metriken, wie viel RAM verbraucht die App, wie oft wurde der Garbage Collector getriggert oder auch Businessmetriken, wie oft eine Bestellung ausgeführt wurde und wann eine Geo anstatt einer Textsuche gestartet wurde. War das alles? Natürlich nicht. Der neueste Hype? Traces. Eine genaue Einsicht, welchen Codepass die App genommen hat und wie lange dieser gedauert hat inklusive aller Metadaten, die wir uns wünschen. Und wenn man dies nun alles in einen Sack packt, gut durchschüttelt und man ein System hat, das man auf Basis dieser Daten Fragen stellen kann, dann nennt man das Observability. Und genau da setzt das Projekt OpenTelemetry an. Und in dieser Episode sprechen wir mit dem Experten Severin Neumann über Observability und OpenTelemetry. Viel Spaß, los geht's! Jeder Software-Ingenieur kennt diese Situation. Man hat etwas programmiert, hat etwas deployed, auf dem eigenen Laptop lief es eigentlich ganz gut und in Produktion funktioniert irgendwie gar nichts oder nur die Hälfte. Und jetzt hat man natürlich dieses Problem, Production ist so diese heilige Umgebung an die man nicht ran darf und da hat man jetzt seine Applikationen am Laufen und das ist so eine ganz klassische Blackbox. Und was macht man als Nächstes? Ganz früher hat man sich die Datei wieder runtergeladen, hat da irgendwelche Console-Logs eingefügt oder FMT-Printline oder System-Outline-Printline und hat die dann deployed und hat gehofft, da kommt dann irgendwas. So war Debugging früher.

Stell dir mal vor, du hast einen Job und stehst mitten im Berufsleben. Du gehst jede Woche hin, Tag für Tag, aber irgendwie erfüllt dich die Tätigkeit nicht mehr und du hast gar keine Lust mehr auf diesen Job. Du überlegst dir was anderes zu machen, was komplett anderes. Etwas, was dich wieder richtig fordert, wo die intrinsische Motivation der Haupttreiber ist und du Spaß dran hast. Doch irgendwie denkst du, puh, jetzt noch, in meinem Alter, einen anderen Beruf ausüben, alles nochmal neu lernen? Was passiert hier eigentlich? Es könnte gut sein, dass du gerade über einen Quereinstieg in ein anderes Berufsfeld nachdenkst. Und genau das hat Melanie Patrick gemacht. Nach 11 Jahren als Executive Assistant in einer international tätigen Unternehmensberatung ist sie in die Softwareentwicklung gewechselt. Und genau darüber sprechen wir mit Melanie. Wie hat sie das gemacht? Was war ihr Haupttreiber? Welche Herausforderungen hat sie währenddessen gemeistert? Wie hat das persönliche Umfeld reagiert? So wie, ob es eine gute Entscheidung war und was sie anderen Leuten empfehlen würde. Und los geht's! Viel Spaß! In diesem Podcast beschäftigen wir uns immer mal wieder über die Themen Bildung, Ausbildung, wie kommt man eigentlich in diesen Job, Beispiele sind, braucht man einen Doktortitel, um Informatiker zu werden.

2023 wird als das Jahr der Effizienz bezeichnet. Viele Firmen schauen sich im Detail an, wie die Arbeit der eigenen Softwareentwicklungsteams effizienter gestaltet werden kann. Die Bereiche Infrastruktur, Cloud, Buildpipelines, Deployment & Co. stehen oft im Mittelpunkt der Frage, was kann optimiert werden, damit wir uns schneller bewegen. In der Regel dauert es nicht lange, bis die Buzzwords interne Developer-Plattform, Developer-Experience und Platform-Engineering fallen. Doch worum geht es eigentlich beim Platform-Engineering? Was ist eine interne Developer-Plattform? Genau darüber sprechen wir heute mit unserem Gast Pouya Abassi. Wir klären, was das alles ist, welche Probleme eigentlich gelöst werden sollen, wie eine erfolgreiche Plattform aussieht, was klassische Fallstricke sind, ab wann sich die ganze Sache eigentlich lohnt und noch vieles, vieles mehr. Wir springen direkt rein. Viel Spaß! In den letzten drei Jahren hat sich so ein Buzzword Bereich entwickelt, um den man eigentlich nicht herumkommt. Jetzt denken natürlich alle, ich spreche über AI, Artificial Intelligence, künstliche Intelligenz und so weiter. Nee, ich spreche heute mal über die Bereiche Developer Experience, Platform Engineering und interne Developer Plattformen. Warum ist das ein Buzzword? Meines Erachtens ist das ein Buzzword, weil sogar McKinsey davon Studien hat und veröffentlicht hat. Und besonders jetzt, Ende 23, bekommt das ganze Thema immer mehr Traction. Besonders im Infrastrukturbereich, Cloud-Bereich, Developer Experience. Jeder möchte Spaß haben beim Entwickeln. Und genau das ist das Thema für diese heutige Podcast-Episode. Und dafür haben wir uns einen Experten eingeladen. Und deswegen heiße ich willkommen Pouya Abassi.

Irgendwann im Leben muss jeder von uns mal etwas vor einer Gruppe von Personen präsentieren. Sei es eine Abschlussarbeit, ein Ergebnis von einem Hackathon, eine Session zum Teilen des eigenen Wissens oder auch das tägliche Stand-Up. Und all diese Präsentationen haben etwas gemeinsam. Du möchtest etwas bei den Zuschauern bewirken, ein gewisses Argument oder eine Nachricht überbringen. Doch wie macht man dies eigentlich richtig? Wie fesseln wir unsere Zuhörer und schaffen richtige Emotionen? Wie verhindert man, dass alle gelangweilt am Handy spielen? Inwieweit kann sogenanntes Storytelling helfen und ab wann ist es einfach mal nicht sinnvoll? Wie lernt man Storytelling eigentlich? Und inwieweit kann die Variation meiner Stimme und meiner Körpersprache beim Präsentieren helfen? Das und noch viel viel mehr besprechen wir in dieser Episode mit unserer Expertin Anna Momba. Los geht's, viel Spaß!

Das Cloud-Marketing verspricht ja viel. Unter anderem Hochverfügbarkeit und Resilienz. Aber wenn dann doch einmal die eigene Applikation offline ist, denkt man vielleicht zurück an dieses Einstellungsmenü bei der Erstellung. Da stand vielleicht etwas von Single Region, Multi Region, Multi Availability Zone, Affinity oder Anti-Affinity. Doch was bedeutet das alles? Und damit willkommen zu einer neuen Engineering Kiosk Episode, in der wir uns das einmal genauer ansehen. Wie sind denn diese Regions und Availability Zones eigentlich bei den Cloud Providern definiert? Reichen zum Beispiel zwei Availability Zones aus, um einen eventuellen Brand in einem Google Data Center Stand zu halten? Gibt es Unterschiede zwischen Google, Amazon, Oracle oder Azure? Was sind denn Local Zones oder Wavelength Zones, Fault Domains? Und was brauche ich davon für meine Applikation? Welche Kosten sind mit Hochverfügbarkeit verbunden und wie oft fällt die Cloud eigentlich aus? In dieser Episode versuchen wir etwas Licht ins Dunkle zu bringen und erklären auch, warum ein einfacher Baum eine gesamte Cloud lahmlegen kann. Und los geht's! Andi, wie ist das Wetter bei dir?

Willkommen zu einer weiteren Episode vom Engineering Kiosk. Viele Softwareentwickler haben den Begriff Continuous Integration schon mal gehört. Ach, natürlich bauen wir die Software täglich. Das Thema mag langweilig klingen, weil es ein täglicher Bestandteil der Softwareentwicklung ist. Dennoch steckt da viel, viel mehr dahinter. Woher kommt der Begriff Continuous Integration eigentlich? Inwieweit hat sich das Konzept von CI sowie die Tools in den letzten 17 Jahren entwickelt? Was bedeuten die Buzzwords DevPipelineParity, ShiftLeft, CI Theater, DevDone und DoneDone eigentlich? Warum sollte auch das Management dafür sorgen, dass der Bild immer grün ist? Und wie sieht CI eigentlich außerhalb der Welt von Web, Cloud und Mobile aus? Zum Beispiel in Industrien wie Automotive und IoT? All das und noch viel, viel mehr klären wir in dieser Podcast-Episode. Viel Spaß! Was mich immer wieder an der Softwareentwicklung fasziniert ist, dass die meisten Leute, die heutzutage unterwegs sind und Software entwickeln, irgendwie immer auf den neuesten Hype-Train aufspringen. Hype-Driven-Development, Hacker-News-Driven-Development. Aber Praxis, die wir täglich anwenden, ist eigentlich schon super alt. Wie zum Beispiel etwas, was vor ca. 25 Jahren mit Extreme-Programming eingeführt wurde. Extreme Programming hatte eine Praxis, die nannte sich permanente Integration. Das ist nicht der heutige Name, den wir verwenden, denn der heutige Name, der wurde ein paar Jahre später von Martin Fowler in einem Artikel von 2006 geprägt und zwar hat er dies mit Continuous Integration übersetzt. Und Continuous Integration kommt heute in allen Formen, Farben und Co. Aber es ist, wenn man es mal zurückführt, eine sehr alte Praxis und ich hoffe in jeder Firma heute Standard. Weil Wolfgang und ich das natürlich auch machen, aber auch immer nur im Cloud- und Websektor. Und wir eine Podcast-Episode zu diesem Thema mal aufnehmen wollen, haben wir uns etwas Hilfe geholt, der ein paar mehr Systeme gesehen hat als Wolfgang und ich in unserem Leben. Deswegen begrüße ich Michael. Hallo.

Kannst du mir mal erklären, wie das mit eurer API funktioniert? Eine typische Frage, die man als Entwickler oder Entwicklerin immer wieder erhält. Egal ob bei Slack oder Teams oder von einer Person, die plötzlich neben einem steht. Und genau dann natürlich, weil man doch gerade im Flow ist und den Fokus für ein hartes Programmierproblem bräuchte. Aber wie geht man damit um, mit diesen Ablenkungen? Ist es die Aufgabe vom Engineering Manager oder von mir selbst, diese Ablenkungen zu verhindern? Wie könnte man diese Probleme angehen und muss man diese Ablenkungen überhaupt verhindern? Wir besprechen einmal unsere Sicht auf die Dinge, wie unsere Teams damit umgehen und der Input aus unserer Community darf natürlich auch nicht fehlen. Und los geht's! Andi, du bist ja extrem gut im Zahlenraten. Du bist ja so gut, dass du sogar in unserer Episode, wo wir ja ganz viele Zahlen geraten haben, so knapp dran warst, dass sogar Patrick und Claudia aus dem Wartungsfenster-Podcast dich so gelobt haben, dass du so gut an den Zahlen dran warst. Darum starte ich jetzt mal mit einer Schätzfrage. Wie viele Leute haben wir in unserer Discord-Community? Und du darfst jetzt nicht nachschauen.

In der Softwareentwicklung ist Agilität hier nicht mehr der neue Hype, sondern eigentlich schon fast der Alltag. Wir arbeiten alle agil und wir befinden uns nicht mehr in dieser alten Zeit des Wasserfallmodells, sondern im agilen Scrum-Ansatz. Aber wie sieht denn das Ganze in großen Multiteamprojekten aus, wenn man hunderte Leute aus den unterschiedlichsten Bereichen von der CEO bis zum Entwickler unter einen Hut bringen muss? Funktionieren dort diese agilen Methoden? Und welche besonderen Herausforderungen ergeben sich bei Projekten, in denen 10, 20 Teams oder vielleicht sogar die ganze Firma eingebunden ist? Wir sprechen mit Stefan, der schon Projekte mit hunderten Beteiligten erfolgreich über die Bühne gebracht hat. Stefan erzählt uns, wie effiziente Kommunikation und Dokumentation abläuft, wie man Stakeholder am Laufenden hält, wie man mit Anforderungen umgeht, die ständig im Fluss sind und wie verhindert man eigentlich dieses Over-Engineering in der Planungsphase von solchen großen Projekten. Und für mich auch ganz spannend sprechen wir gegen Ende auch noch, wie die Remote-Kultur die Umsetzung von großen Projekten beeinflusst. Und los geht's!

Software-Engineers und andere Leute im Tech-Bereich werden üblicherweise dafür bezahlt, Dinge, Code, Pipelines und Co. zu ändern, Bugs fixen, Features entwickeln, vielleicht sogar einen Bereich zu revolutionieren und zu disrupten. Was ist jedoch, wenn sie daran gehindert werden? Wenn sie keinen Code in den Main-Branch merken können und alle Deployments untersagt bzw. gesperrt sind, dann befindet sich die Organisation in einem sogenannten Code- bzw. Deployment-Freeze. Doch warum sollte eine Firma das tun? Wozu ist das gut, wenn man keinen Wert zum Kunden schippen kann? Nachteile fallen einem da bestimmt viele ein. Doch gibt es auch Vorteile? Betrifft ein solcher Freeze eigentlich alle und jeden? Und wie gehen unterschiedliche Industrien und Softwareprodukte damit um? Wir widmen uns heute dem Thema Codefreeze und Deploymentfreeze. Denn wir denken immer, wenn du freitags nicht deployst, hast du bereits einen Deploymentfreeze. Lieber Wolfgang, ich habe schon fast eine religiöse Frage an dich.

Google, Adobe und die Gates Foundation schwören auf Objective und Key Results, abgekürzt OKRs. Eine Methode für die Zielsetzung, die Teams beim Festlegen messbarer Ziele unterstützen sollen. Doch was ist wirklich dran am Hype? Ist es wirklich so gut wie geschnitten Brot? Wir sind der Sache auf den Grund gegangen und haben mit Marco Alberti von Murakami über das Thema gesprochen. Mit seinem Unternehmen berät er Firmen jeglicher Größe zum Thema Vision, Mission und Zielsetzung durch OKRs und hat dabei schon eine ganze Menge gesehen. Mit ihm klären wir, was OKRs eigentlich sind. Wie das Ganze zu anderen agilen Methoden wie Scrum und Kanban steht, wie OKRs ein Unternehmen verändern können, ob die AI zur Erstellung von Zielsetzungen hilfreich ist, was gute und schlechte Objectives sind, ob individuell personenbezogene Ziele in Software-Teams Sinn machen und vieles mehr. Wir springen direkt rein. Bis gleich.

Side Projects werden oft aus Experimentierfreudigkeit gestartet. Man probiert einfach etwas Neues aus, will etwas Neues lernen, abseits vom täglichen Job. Bei uns war das nicht anders und wir haben den Engineering Kiosk Podcast gestartet. Und irgendwie scheinen Side Projects super interessant zu sein, vielleicht interessanter als der eigentliche Job. Denn in letzter Zeit haben wir immer öfter die Frage bekommen, was unser Tech Stack vom Podcast ist. Und darum führen wir euch heute in dieser Episode in den Maschinenraum von unserem Audio-Format ein und zeigen euch, was alles notwendig ist, um dieses Hörerlebnis für euch zu erzeugen. Von den Mikrofonen, über die technischen Pipelines, unseren Workflows, Automatisierungen, Software, die wir verwenden, unsere Strategie, interessante Gäste zu finden und natürlich auch über Fehler und unsere Betriebenes Oberengineering. Also die dreckige Wahrheit. Und los geht's!

Wenn man mal Manager war und so Teamverantwortung hatte und dann wieder IC wird, ... ... man hat immer noch diese Denkweise, dieses Mindset von einem Manager. Man weiß, okay, mein Manager, der ist auch nicht allwissend, weil ich war es als Manager auch nicht. Wenn ein Engineer zum Manager kommt und sagt, ich habe da so und so ein Problem, dann hat der Manager nicht die Antwort parat, weil er meistens auch nicht, er steckt ja nicht so tief drin wie der Engineer in der Regel. Er kann oft nur helfen, dem Engineer die Lösung selber zu finden. Und wenn du das als Engineer weißt, dann sparst du dir manchmal den Schritt, ... zu deinem Manager zu gehen und den um die Lösung anzubetteln quasi, ... ... sondern du weißt, okay, der ist auch nicht schlauer als ich oder allwissend, ... ... dann probiere ich erstmal selber eine Entscheidung zu fällen und eine Lösung zu finden.

Also ich weiß noch, wie ich in die Rolle gekommen bin. Da hat mich ein Sales-Kollege gefragt, ob ich Sales-Engineer werden will. Da hab ich gesagt, na ja, um Himmels Willen, nie im Leben. Ein halbes Jahr später wollte ich die Rolle wechseln. Ich wollte Integration Architect woanders werden. Und so nach einem Job und dann fragt eine Rekruterin, ob ich nicht Sales-Engineer werden will. Ich so, keine Ahnung, was ist das? Was macht man da? Und irgendwie, ja, nicht so richtig. Er hat gesagt, ja, okay, wir suchen eh erfahrene Leute, also erfahrene Profis suchen wir eigentlich. Ich so, was? Stopp. Ich bin ein erfahrener Profi, also was genau muss ich jetzt machen? Und dann war ich bei MuseSoft auf einmal Sales Engineer und war in dieser Rolle als Techniker und im Sales. Und so, ich bin ins kalte Wasser letztendlich gesprungen, ohne genau zu wissen, was die Rolle bedeutet.

Untertitel im Auftrag des ZDF, 2021 DevOps, MLOps, CloudOps, AIOps, DataOps, SecOps, DevSecOps, HROps, LegalOps, BitsOps, LLMOps, ChatOps, NoOps oder einfach nur ShiftLeft. Aber was bedeutet dieser Trend vom ShiftLeft? Müssen wir jetzt als EntwicklerInnen alles lernen? Sind wir für alles verantwortlich? Und was ist an der Theorie dran, dass unsere gut bezahlten Jobs nicht der KI, sondern ShiftLeft zum Opfer fallen könnten? Wir nehmen uns diesem Hype-Thema einmal an und besprechen die ganzen Implikationen.

Aus meiner Wahrnehmung als Beraterin ist inzwischen IntelliJ oder die JetBrains-Produkte sind ganz klar Marktführer und die kosten Geld, also wenn man die professionell benutzt. Eclipse hat kein Geld gekostet. Das heißt, es gab eine Zeit, wo Leute einfach das Geld nicht ausgeben wollten dafür und einfach nicht geglaubt haben, dass es das wert ist, weil du kannst halt nicht auf dem Papier beweisen, wie viel hast du jetzt gespart, weil deine zehn Entwickler IntelliJ benutzen. Und ähnlich sehe ich das auch bei Copilot, dass es halt eventuell schwierig ist, das zu beweisen. Ich versuche auch immer nicht so die alte Frau zu sein, die auf der Veranda steht und ihre Faust schwingt und sagt, die jungen Leute heute mit Coding Assistance, die lernen gar nicht mehr, wie man richtig programmiert. Und vielleicht ist das einfach jetzt eine andere Art zu lernen, als wir Internetsuche, Google und so weiter bekommen haben. da hat es so einen richtigen kognitiven Shift gegeben. Also von, ich muss Sachen auswendig wissen, zu ich muss nur wissen, wo ich die finde. Und das war so ein kollektiver, kognitiver Shift, wie wir denken. Meine Oma zum Beispiel konnte immer noch Gedichte auswendig und sowas. Das macht ja heute keiner mehr, weil muss man nicht mehr. Also das fand ich einen interessanten Gedanken. Gibt es da jetzt einen kognitiven Shift und ob der gut ist oder schlecht, werden wir vielleicht dann sehen. Und es gibt auf jeden Fall auch Anzeichen, dass es auf der anderen Seite auch sehr helfen kann.

Die Frontend-Entwicklung hat in den letzten Jahren einen ziemlich großen Wandel erlebt und Web-Apps wurden immer mehr Desktop-like. Früher wurde CSS und JavaScript einfach via Script-Tag inkludiert. Heute sind Stichwörter wie Minification, Tree-Shaking, Polyfills, Transpilieren und Kompilieren aus dem Frontend-Stack nicht mehr wegzudenken. Die Komplexität hat zugenommen durch gestiegene Anforderungen, State-Management, aber auch durch große Frameworks wie React, Angular, Vue.js und Co. Auf der anderen Seite erleben Frameworks wie HTMX, die mit Einfachheit werben, einen neuen Hype. Das Ganze wirft für mich ein paar Fragen auf. Erkaufen wir uns durch diesen großen Tooling-Stack wirklich Einfachheit? Oder schließen wir uns durch die Komplexität in eine proprietäre API ein, die es schwieriger macht, das Framework zu wechseln? Ist die Komplexität wirklich gerechtfertigt? Und überhaupt, entwickeln wir uns eigentlich weiter und die Konzepte sind alle neu? Oder ist das alles nur alter Wein in neuen Schläuchen? Genau das besprechen wir mit Golo Roden. Golo ist Frontend-Experte und spezialisiert auf native Web-Technologie. Mit ihm behandeln wir unter anderem Themen wie die Probleme von aktuellen UI-Frameworks und woher diese Probleme eigentlich kommen, wie er zu den Konzepten wie HTMX steht, über mögliche Lösungsansätze für die Probleme des heutigen Frontend-Stacks, Standards wie Web-Components und welche Rolle Typescript in dem ganzen Mix einnimmt. Wir springen direkt rein und los geht's. Viel Spaß!

Irgendwann kommt der Zeitpunkt, da denken viele von uns, soll ich mir mal was Neues suchen? Ein Tapetenwechsel im Job könnte mir doch mal richtig guttun. Oder das könnte mein nächster Schritt in meiner Karriere sein. Aber die Jobsuche kann anstrengend sein. Im Internet liest man viele Do's and Don'ts. Verwirrung kommt schnell auf, was nun der richtige Weg ist. Genau deswegen sind Erfahrungen von anderen so wichtig. Und genau darum geht es in dieser Podcast Episode. Zu Gast sind Doreen und Ellen vom Unmute It Podcast. Beide haben vor kurzem ihren Arbeitgeber gewechselt und erzählen von ihrer Herangehensweise und ihren Erfahrungen bei der Jobsuche. Wir sprechen über Jobhopping und wann es Zeit ist, sich einen neuen Job zu suchen, wie und wo man nach neuen Arbeitgebern sucht, wie wichtig das eigene Netzwerk und Vitamin B ist, worauf es bei der richtigen Firma ankommt, was Red Flags und Warnsignale sind, über den Interviewprozess, wie viel Glück involviert ist und wie man mit Misserfolgen umgeht. Viel Spaß bei diesem Podcast-Crossover.

NoCode ist technische Schuld. Zumindest ist das meine Theorie. Und damit willkommen zu einer neuen Episode im Engineering Kiosk. Heute dreht sich alles um das Thema NoCode und die eventuell damit verbundenen technischen Schulden. Wir besprechen, ob NoCode die magische Lösung ist, alles schneller und zugänglicher zu machen und wir diskutieren, wie NoCode die Softwareentwicklung demokratisieren könnte und ob es wirklich ein Allheilmittel gegen den Fachkräftemangel sein kann. Du erfährst, was technische Schulden wirklich sind und warum diese nicht immer negativ sein müssen. Also auf geht's, tauchen mit uns ein in die Welt der APIs, Workflows, automatisierten Prozesse, No-Code, Low-Code, High-Code und natürlich den technischen Schulden.

