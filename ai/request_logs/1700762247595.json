{"prompt":"You will be provided a part of a transcript of a podcast episode.\nYour task is to find quotable sections that are short and can be used in shorts on instagram or youtube.\nThe sections should adhere to one or more of the following properties:\n- funny\n- provocative\n- exlainatory\n- surprising\n- controversial\n- emotional\n- shocking\n- new\nOutput the list of sections in german.","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Ein bierernstes Thema.\"\n- \"Für mich eine wirklich schwierige Folge.\"\n- \"Ein harten Dialekt, der für mich als Deutscher teilweise echt schwierig zu verstehen ist.\"\n- \"Wir hatten diverse Hackathon-Nächte mit Club Marte, Wodka und Helene Fischer um vier Uhr morgens.\"\n- \"Du hast einen Fast Async and Stream Based Link Checker in Rust geschrieben, womit man unter anderem tote Links von Static Websites parsen kann und der auch von Amazon für die Amazon Web Service Dokumentation genutzt wird, also Hut ab.\"\n- \"Du erzählst öfters mal recht lustige Storys auf Meetups.\"\n- \"Rust ist eine art und weise programme zu schreiben wie man sie eigentlich vorher noch nicht hatte und zwar in einer art und weise dass man fehler vermeidet die in typischen programmiersprachen wie C++ und C einfach prävalent sind.\"\n- \"Rust ist eine Möglichkeit, Speicher auf andere Art zu verwalten, indem der Compiler zur Compile-Zeit erkennt, ob Speicher beispielsweise von mehreren Stellen mutable, also veränderlich, beschrieben wird oder genutzt wird.\"\n- \"Geschwindigkeit ist für viele ein Einstiegsfaktor, weil die einfach aus Sprachen kommen, die vielleicht generell etwas langsam sind, wie Python oder JavaScript für manche Bereiche.\"\n- \"Rust einfach eine stabilere Sprache ist.\"\n- \"Wenn's baut, dann läuft's auch.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Der Borrow Checker ist ein Teil des Rust-Compilers, der für Ownership und Borrowing zuständig ist und diese Regeln überprüft.\"\n- \"Bei C gibt es mittlerweile doch einige Compiler. Gibt es bei Rust nur einen?\"\n- \"Rust ist eine Multi-Paradigm-Programmiersprache.\"\n- \"Rust kommt eigentlich auch aus der funktionalen Welt.\"\n- \"Rust wurde mit dem Browser entwickelt und hat sich dann verselbstständigt.\"\n- \"Wofür sollte ich Rust nicht einsetzen? Bei Scripting und bei Prototypes ist es wahrscheinlich etwas übertrieben.\"\n- \"Klassisch benutzt man Rust, wenn man irgendwo zwischen dem Hardware- und Software-Interface agiert.\"\n- \"Rust ist spannend für alles, was relativ nah am Metall ist, z.B. Betriebssysteme oder Webserver.\"\n- \"Rust bietet Sicherheit und Stabilität bei High-Performance Anwendungen.\"\n- \"Amazon verwendet Rust für Firecracker, um Kosten um 50 Prozent zu reduzieren.\"\n- \"Dropbox hat ihren Data Layer in Rust neu geschrieben, um näher an der Hardware und Infrastruktur zu sein.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Die intelligente Nutzung von Datenstrukturen wie bei Kafka und Append Write Log ist viel maßgeblicher für die Performance als die Sprache selbst.\"\n- \"Man könnte sich vier Java Instanzen sparen, wenn man eine Rust Instanz hat. Das ist extrem spannend, auch aus Kostensicht.\"\n- \"Der Einstieg in Rust war extrem schwierig, wie der erste Mensch in der Programmierung zu sein.\"\n- \"Rust ist schwierig, wenn man gegen die Sprache kämpft. Je früher man aufhört zu kämpfen und die Sprache zu lernen, desto leichter wird es.\"\n- \"Das Borrowing Speicherkonzept in Rust verändert die Welt.\"\n- \"In Rust gibt es das Copy Trait, das es ermöglicht, bestimmte Datentypen relativ günstig zu kopieren.\"\n- \"Die Ownership in Rust besagt, dass es einen Besitzer für einen Speicherbereich gibt, und dieser auch die Kontrolle darüber hat.\"\n- \"Wenn man ein Objekt in Rust einer Funktion übergibt, wird die Ownership an diese Funktion übertragen.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Also, das ist ein Objekt, das wiederum aufgeräumt wird, wie beispielsweise eine Box in Rust. Und die beinhaltet einen Pointer. Aber auf diesen Pointer greife ich selber gar nicht zu, sondern ich verwalte nur den Speicher über diese Box.\"\n- \"Und eigentlich ist damit die Pointer-Verwaltung viel viel sicherer.\"\n- \"Und jetzt stelle ich mal eine kätzerische Frage... gibt es in Rust globale Variablen?\"\n- \"Es gibt in Rust globale Variablen. Wie funktioniert das Borrowing oder der Borrower-Checker bei globalen Variablen?\"\n- \"Die Frage ist halt, ob es verpflichtend ist. Genau also hilft der Compiler dir und sagt nee ist nicht.\"\n- \"Der Compiler verpflichtet dich dazu das zu entscheiden. An der Stelle an der du mit dem Compiler mit diesen Regeln in Konflikt kommst wird dein Programm nicht kompilieren.\"\n- \"Und ein Compiler sagt dir dann auch ganz genau warum.\"\n- \"Also entweder du hast dann den Fall, dass Ownership übertragen wurde zu einem anderen Writer beispielsweise, und dann musst du entscheiden, wie du das verhindern kannst.\"\n- \"Oder du kannst es eben nicht so modellieren und musst dir eine andere Lösung suchen, wie Atomics, oder du hast halt einfach am besten gar keine globalen Variablen.\"\n- \"Ja, in der parallelen Welt ist sowas zum Beispiel noch viel, viel wichtiger.\"\n- \"Der Compiler macht folgendes. Man bekommt als Threat eine Variable mit einem Mutex übergeben. An einer Stelle ist dann beispielsweise Schluss mit einer Funktion und dann würde diese Variable aufgeräumt werden, weil da ein implizites Drop eingeführt wird.\"\n- \"Und dann hat man aber in einer anderen Stelle im Code oder vielleicht im selben Threadpool nochmal einen anderen Thread, der auch darauf zugreifen will. Und dann sagt einem der Compiler, ja das ist aber nicht möglich, weil die Variable ist jetzt schon gedroppt.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Das klassische Entwicklermodell ist ja eigentlich, du programmierst was, compilest das, und du kriegst irgendwie eine komische kryptische Errormeldung.\"\n- \"Mit den kryptischen Fehlermeldungen. PHP, bei mir ist auch Runtime Fettel Error. Python irgendwas mit nem Dict, ne, wir kennen das alle.\"\n- \"Es ist auch da explizit, dass man diesen Fall irgendwie behandeln muss. Und ich denke, man wird da in der Beziehung auch vom Compiler ein bisschen an die Hand genommen und besser geschult.\"\n- \"Und eigentlich hätte ich ganz gerne so ein Tool vor 15 Jahren gehabt, als ich das erste Mal vielleicht, oder vielleicht sogar vor 20 Jahren schon, als ich das erste Mal C programmiert habe.\"\n- \"Dieses unsafe Keyword, ja? Meine Frage ist, gibt es unsafe Rusts? Und was sind valide Anwendungsfälle dafür, sich in diese Ecke zu begeben?\"\n- \"Und man muss sich nur überlegen, wie man damit umgeht. Man kann jetzt zum Beispiel den Weg einschlagen, dass man sagt, okay, wenn alles unsafe ist, dann ist es ja auch egal, was ich in meiner Programmiersprache mache, weil ich kann ja eh die Welt nicht retten.\"\n- \"Und die Art und Weise, wie man Rust programmiert, ist eigentlich, dass man sehr, sehr wenig Unsafe programmiert.\"\n- \"Wie geht Rust mit Rückwärts-Kompatibilität um?\"\n- \"Aber mich würde mal interessieren, wie macht Rust das? Wie sorgt Rust dafür, zum Beispiel neue Features wie Async, das Async-Keyword haben sie vor anderthalb Jahren eingeführt oder ähnliches?\"\n- \"Die grundsätzliche Idee ist, man will ja keine backwards incompatible changes haben. Warum ist das so? Weil Toolchains einfach darauf basieren, weil gewisse Prozesse in Firmen darauf basieren, dass der Compiler stabil ist.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Die Leute haben das zum ersten Mal wirklich produktiv eingesetzt, haben dann festgestellt, es gibt ein paar Bugs, die man nur beheben kann, indem man ändert, was der Compiler macht.\"\n- \"Das heißt, es gibt nicht einen Compiler, den man sich installiert, sondern mehrere.\"\n- \"Man will zum einen kleine Breaking Changes machen, aber man will nicht immer wieder eine neue Edition rausgeben.\"\n- \"Das ist ein Tool, mit dem alle Crates, die jemals veröffentlicht wurden, auf solche Änderungen checken.\"\n- \"Die schauen sich das Ecosystem an und schauen, wie werden Features genutzt, und versuchen dann, das beste Design in die Sprache zu überführen.\"\n- \"Die checken nicht nur, ob eine Änderung irgendwelchen Impact auf Crates hat, sondern kontaktieren die Maintainer und machen die Änderung nur, wenn sie gemerkt wird.\"\n- \"Also ich finde es schon sehr spannend, dass man diese Vernetzung der Welt einfach nutzt, diese Daten, die man heutzutage bekommt, diese statistischen Daten von den Usern von der Usage, ist schon sehr cool.\"\n- \"Und dann habe ich irgendwie nachgefragt, hat jemand von euch schon mal Rust probiert? Und wir alle, nein, aber Rust ist ja cool, Rust sollten wir schon probieren.\"\n- \"Warum hat Rust so ein gutes Image? Ich glaube, es ist wie bei allen neuen Dingen, die haben halt was Magisches in sich.\"\n- \"Vielleicht ist Rust jetzt momentan einfach die gehypte Sprache und in ein paar Jahren ist es dann vielleicht sick oder was weiß ich wie oder irgendwas anderes.\"\n- \"Man ist nicht gewöhnt, dass der Compiler intelligent antwortet. Compiler ist immer dumm und man ist gewöhnt, im schlimmsten Fall, du führst das Programm aus, kriegst einen Sack voll, du hast null Ahnung, was passiert.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Und die Compiler-Meldungen, gerade wenn man an C und C++ denkt, sind manchmal so kryptisch, dass du keine Ahnung hast und überhaupt mal ewig lang probieren musst, überhaupt zu verstehen, was denn da das Problem ist.\"\n- \"Rust hat momentan 3,7 Millionen Nutzer und 600.000 davon allein in den letzten sechs Monaten, was ein extrem beachtliches Wachstum ist.\"\n- \"Ich glaube, es wird vielleicht eher C++ Konkurrenz machen für neue Projekte.\"\n- \"Das Async-Ecosystem ist natürlich noch sehr, sehr jung.\"\n- \"Man muss keine Threads und so weiter explizit machen, sondern mach Async und das passiert dann automatisch.\"\n- \"Es ändert auf jeden Fall die Art und Weise, wie man Rust programmiert. Es ist fast wie ein Dialekt.\"\n- \"Generell ist es so dass das ecosystem halt noch sehr sehr jung ist es gibt sehr viele libraries die stabil sind und benutzt werden aber es gibt auch sehr viele dinge die noch nicht 1.0 erreicht haben.\"\n- \"Aber natürlich, man kann wunderbar in Rust produktiv programmieren.\"\n- \"Für mich als nicht Rust Entwickler, von was sprechen wir da? Jetzt bei einem großen Projekt oder bei einem mittelgroßen Projekt sprechen wir da dann von Stunden?\"\n- \"Wenn du jetzt eine Applikation hast, sagen wir mal, die hat 100.000 Zeilen Code und du hast einen einigermaßen soliden Linux-Laptop beispielsweise und du nutzt ein paar Features wie vielleicht Serdy für Parsing, Ja dann bist du schon mal bei konzert peilzeiten vielleicht zwischen 40 sekunden und zwei drei minuten also das kann schon mal passieren ja je nachdem was du da benutzt und das summiert sich natürlich auf.\"\n- \"Auf dem neuen Apple M1, muss ich sagen, ist es auch viel viel besser geworden. Hardware tut dann natürlich sein Übriges, aber der Compiler wird auch selbst jedes Jahr um die 10% schneller, was ein guter Wert ist.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"In Rust wird beispielsweise für jeden Input, den eine generische Funktion hat, eine konkrete Version zur Compile-Zeit gebaut.\"\n- \"Das ist ein Pattern.\" (bezogen auf das Builder-Pattern)\n- \"Ja, und das sind Modelle oder vielleicht auch Patterns, wenn man die so nennen will, die in Rust-Gang und Geber sind.\"\n- \"Wir haben ja schon in der Episode Was war's, Andi? 93 mit Barbara Liskov, wo wir gelernt haben, dass Vererbung ja böse ist.\"\n- \"Man kann schon Funktionsüberladung machen.\"\n- \"Aber es sind schon auch trotzdem Edge Cases, wo man wirklich sagt, okay, da macht das Sinn.\"\n- \"Und insgesamt gewöhnt man sich da aber sehr, sehr schnell dann an diese Art eher zu komponieren, also Composition über Inheritance zu machen.\"\n- \"Ja, das geht so in die Tiefe. Das macht mit uns keine Konkurrenz, wo wir immer nur an der Oberfläche da ein bisschen kratzen mit Andi vor allem.\"\n- \"Vielen lieben Dank, Matthias. Schön, auch mal etwas über eine andere Programmiersprache zu hören. Und ja, ich bin auch motiviert.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Ich wette noch, also meta-technisch jetzt hier, ich würde gerne noch die Frage stellen, wenn du eine, eine Ressource zum Lernen empfehlen würdest.\"\n- \"Der Y-Rust-Artikel ist nicht zum Lernen.\"\n- \"Wir haben echt technische Probleme heute.\"\n- \"Vielleicht weiß er, dass es geht und ihm ist es jetzt peinlich.\"\n- \"Mir ist das ein bisschen peinlich.\"\n- \"Wir haben einen Aufnahmetermin im Jahr. Wir haben zwei Gäste an diesem Tag und es fällt hier eins nach dem anderen aus.\"\n- \"Der ist auf eine Stunde zehn genau gedeimt, der Akku.\""},"finish_reason":"stop"}],"results":[{"status":"fulfilled","value":{"id":"chatcmpl-8O84p98qMBpIxeNle5Cs0QLcWvV4e","object":"chat.completion","created":1700761611,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Ein bierernstes Thema.\"\n- \"Für mich eine wirklich schwierige Folge.\"\n- \"Ein harten Dialekt, der für mich als Deutscher teilweise echt schwierig zu verstehen ist.\"\n- \"Wir hatten diverse Hackathon-Nächte mit Club Marte, Wodka und Helene Fischer um vier Uhr morgens.\"\n- \"Du hast einen Fast Async and Stream Based Link Checker in Rust geschrieben, womit man unter anderem tote Links von Static Websites parsen kann und der auch von Amazon für die Amazon Web Service Dokumentation genutzt wird, also Hut ab.\"\n- \"Du erzählst öfters mal recht lustige Storys auf Meetups.\"\n- \"Rust ist eine art und weise programme zu schreiben wie man sie eigentlich vorher noch nicht hatte und zwar in einer art und weise dass man fehler vermeidet die in typischen programmiersprachen wie C++ und C einfach prävalent sind.\"\n- \"Rust ist eine Möglichkeit, Speicher auf andere Art zu verwalten, indem der Compiler zur Compile-Zeit erkennt, ob Speicher beispielsweise von mehreren Stellen mutable, also veränderlich, beschrieben wird oder genutzt wird.\"\n- \"Geschwindigkeit ist für viele ein Einstiegsfaktor, weil die einfach aus Sprachen kommen, die vielleicht generell etwas langsam sind, wie Python oder JavaScript für manche Bereiche.\"\n- \"Rust einfach eine stabilere Sprache ist.\"\n- \"Wenn's baut, dann läuft's auch.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2418,"completion_tokens":337,"total_tokens":2755}}},{"status":"fulfilled","value":{"id":"chatcmpl-8O8EWU9L6uzBGO6SLuTcoBIFtlUSd","object":"chat.completion","created":1700762212,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Der Borrow Checker ist ein Teil des Rust-Compilers, der für Ownership und Borrowing zuständig ist und diese Regeln überprüft.\"\n- \"Bei C gibt es mittlerweile doch einige Compiler. Gibt es bei Rust nur einen?\"\n- \"Rust ist eine Multi-Paradigm-Programmiersprache.\"\n- \"Rust kommt eigentlich auch aus der funktionalen Welt.\"\n- \"Rust wurde mit dem Browser entwickelt und hat sich dann verselbstständigt.\"\n- \"Wofür sollte ich Rust nicht einsetzen? Bei Scripting und bei Prototypes ist es wahrscheinlich etwas übertrieben.\"\n- \"Klassisch benutzt man Rust, wenn man irgendwo zwischen dem Hardware- und Software-Interface agiert.\"\n- \"Rust ist spannend für alles, was relativ nah am Metall ist, z.B. Betriebssysteme oder Webserver.\"\n- \"Rust bietet Sicherheit und Stabilität bei High-Performance Anwendungen.\"\n- \"Amazon verwendet Rust für Firecracker, um Kosten um 50 Prozent zu reduzieren.\"\n- \"Dropbox hat ihren Data Layer in Rust neu geschrieben, um näher an der Hardware und Infrastruktur zu sein.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2424,"completion_tokens":262,"total_tokens":2686}}},{"status":"fulfilled","value":{"id":"chatcmpl-8O84p31sDa055mVFLqARP9PkQm6wR","object":"chat.completion","created":1700761611,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Die intelligente Nutzung von Datenstrukturen wie bei Kafka und Append Write Log ist viel maßgeblicher für die Performance als die Sprache selbst.\"\n- \"Man könnte sich vier Java Instanzen sparen, wenn man eine Rust Instanz hat. Das ist extrem spannend, auch aus Kostensicht.\"\n- \"Der Einstieg in Rust war extrem schwierig, wie der erste Mensch in der Programmierung zu sein.\"\n- \"Rust ist schwierig, wenn man gegen die Sprache kämpft. Je früher man aufhört zu kämpfen und die Sprache zu lernen, desto leichter wird es.\"\n- \"Das Borrowing Speicherkonzept in Rust verändert die Welt.\"\n- \"In Rust gibt es das Copy Trait, das es ermöglicht, bestimmte Datentypen relativ günstig zu kopieren.\"\n- \"Die Ownership in Rust besagt, dass es einen Besitzer für einen Speicherbereich gibt, und dieser auch die Kontrolle darüber hat.\"\n- \"Wenn man ein Objekt in Rust einer Funktion übergibt, wird die Ownership an diese Funktion übertragen.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2408,"completion_tokens":243,"total_tokens":2651}}},{"status":"fulfilled","value":{"id":"chatcmpl-8O84qOa9vr3pyFgHJjsVGYYXJrEP4","object":"chat.completion","created":1700761612,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Also, das ist ein Objekt, das wiederum aufgeräumt wird, wie beispielsweise eine Box in Rust. Und die beinhaltet einen Pointer. Aber auf diesen Pointer greife ich selber gar nicht zu, sondern ich verwalte nur den Speicher über diese Box.\"\n- \"Und eigentlich ist damit die Pointer-Verwaltung viel viel sicherer.\"\n- \"Und jetzt stelle ich mal eine kätzerische Frage... gibt es in Rust globale Variablen?\"\n- \"Es gibt in Rust globale Variablen. Wie funktioniert das Borrowing oder der Borrower-Checker bei globalen Variablen?\"\n- \"Die Frage ist halt, ob es verpflichtend ist. Genau also hilft der Compiler dir und sagt nee ist nicht.\"\n- \"Der Compiler verpflichtet dich dazu das zu entscheiden. An der Stelle an der du mit dem Compiler mit diesen Regeln in Konflikt kommst wird dein Programm nicht kompilieren.\"\n- \"Und ein Compiler sagt dir dann auch ganz genau warum.\"\n- \"Also entweder du hast dann den Fall, dass Ownership übertragen wurde zu einem anderen Writer beispielsweise, und dann musst du entscheiden, wie du das verhindern kannst.\"\n- \"Oder du kannst es eben nicht so modellieren und musst dir eine andere Lösung suchen, wie Atomics, oder du hast halt einfach am besten gar keine globalen Variablen.\"\n- \"Ja, in der parallelen Welt ist sowas zum Beispiel noch viel, viel wichtiger.\"\n- \"Der Compiler macht folgendes. Man bekommt als Threat eine Variable mit einem Mutex übergeben. An einer Stelle ist dann beispielsweise Schluss mit einer Funktion und dann würde diese Variable aufgeräumt werden, weil da ein implizites Drop eingeführt wird.\"\n- \"Und dann hat man aber in einer anderen Stelle im Code oder vielleicht im selben Threadpool nochmal einen anderen Thread, der auch darauf zugreifen will. Und dann sagt einem der Compiler, ja das ist aber nicht möglich, weil die Variable ist jetzt schon gedroppt.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2335,"completion_tokens":455,"total_tokens":2790}}},{"status":"fulfilled","value":{"id":"chatcmpl-8O84pDaRiQpDWtV7utVn7d4xKWNgE","object":"chat.completion","created":1700761611,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Das klassische Entwicklermodell ist ja eigentlich, du programmierst was, compilest das, und du kriegst irgendwie eine komische kryptische Errormeldung.\"\n- \"Mit den kryptischen Fehlermeldungen. PHP, bei mir ist auch Runtime Fettel Error. Python irgendwas mit nem Dict, ne, wir kennen das alle.\"\n- \"Es ist auch da explizit, dass man diesen Fall irgendwie behandeln muss. Und ich denke, man wird da in der Beziehung auch vom Compiler ein bisschen an die Hand genommen und besser geschult.\"\n- \"Und eigentlich hätte ich ganz gerne so ein Tool vor 15 Jahren gehabt, als ich das erste Mal vielleicht, oder vielleicht sogar vor 20 Jahren schon, als ich das erste Mal C programmiert habe.\"\n- \"Dieses unsafe Keyword, ja? Meine Frage ist, gibt es unsafe Rusts? Und was sind valide Anwendungsfälle dafür, sich in diese Ecke zu begeben?\"\n- \"Und man muss sich nur überlegen, wie man damit umgeht. Man kann jetzt zum Beispiel den Weg einschlagen, dass man sagt, okay, wenn alles unsafe ist, dann ist es ja auch egal, was ich in meiner Programmiersprache mache, weil ich kann ja eh die Welt nicht retten.\"\n- \"Und die Art und Weise, wie man Rust programmiert, ist eigentlich, dass man sehr, sehr wenig Unsafe programmiert.\"\n- \"Wie geht Rust mit Rückwärts-Kompatibilität um?\"\n- \"Aber mich würde mal interessieren, wie macht Rust das? Wie sorgt Rust dafür, zum Beispiel neue Features wie Async, das Async-Keyword haben sie vor anderthalb Jahren eingeführt oder ähnliches?\"\n- \"Die grundsätzliche Idee ist, man will ja keine backwards incompatible changes haben. Warum ist das so? Weil Toolchains einfach darauf basieren, weil gewisse Prozesse in Firmen darauf basieren, dass der Compiler stabil ist.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2420,"completion_tokens":430,"total_tokens":2850}}},{"status":"fulfilled","value":{"id":"chatcmpl-8O84qyLm6G4rWkiR5ZbCZROFuEwB6","object":"chat.completion","created":1700761612,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Die Leute haben das zum ersten Mal wirklich produktiv eingesetzt, haben dann festgestellt, es gibt ein paar Bugs, die man nur beheben kann, indem man ändert, was der Compiler macht.\"\n- \"Das heißt, es gibt nicht einen Compiler, den man sich installiert, sondern mehrere.\"\n- \"Man will zum einen kleine Breaking Changes machen, aber man will nicht immer wieder eine neue Edition rausgeben.\"\n- \"Das ist ein Tool, mit dem alle Crates, die jemals veröffentlicht wurden, auf solche Änderungen checken.\"\n- \"Die schauen sich das Ecosystem an und schauen, wie werden Features genutzt, und versuchen dann, das beste Design in die Sprache zu überführen.\"\n- \"Die checken nicht nur, ob eine Änderung irgendwelchen Impact auf Crates hat, sondern kontaktieren die Maintainer und machen die Änderung nur, wenn sie gemerkt wird.\"\n- \"Also ich finde es schon sehr spannend, dass man diese Vernetzung der Welt einfach nutzt, diese Daten, die man heutzutage bekommt, diese statistischen Daten von den Usern von der Usage, ist schon sehr cool.\"\n- \"Und dann habe ich irgendwie nachgefragt, hat jemand von euch schon mal Rust probiert? Und wir alle, nein, aber Rust ist ja cool, Rust sollten wir schon probieren.\"\n- \"Warum hat Rust so ein gutes Image? Ich glaube, es ist wie bei allen neuen Dingen, die haben halt was Magisches in sich.\"\n- \"Vielleicht ist Rust jetzt momentan einfach die gehypte Sprache und in ein paar Jahren ist es dann vielleicht sick oder was weiß ich wie oder irgendwas anderes.\"\n- \"Man ist nicht gewöhnt, dass der Compiler intelligent antwortet. Compiler ist immer dumm und man ist gewöhnt, im schlimmsten Fall, du führst das Programm aus, kriegst einen Sack voll, du hast null Ahnung, was passiert.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2367,"completion_tokens":435,"total_tokens":2802}}},{"status":"fulfilled","value":{"id":"chatcmpl-8O84pm6A6RSrRBuaVngLenULl2481","object":"chat.completion","created":1700761611,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Und die Compiler-Meldungen, gerade wenn man an C und C++ denkt, sind manchmal so kryptisch, dass du keine Ahnung hast und überhaupt mal ewig lang probieren musst, überhaupt zu verstehen, was denn da das Problem ist.\"\n- \"Rust hat momentan 3,7 Millionen Nutzer und 600.000 davon allein in den letzten sechs Monaten, was ein extrem beachtliches Wachstum ist.\"\n- \"Ich glaube, es wird vielleicht eher C++ Konkurrenz machen für neue Projekte.\"\n- \"Das Async-Ecosystem ist natürlich noch sehr, sehr jung.\"\n- \"Man muss keine Threads und so weiter explizit machen, sondern mach Async und das passiert dann automatisch.\"\n- \"Es ändert auf jeden Fall die Art und Weise, wie man Rust programmiert. Es ist fast wie ein Dialekt.\"\n- \"Generell ist es so dass das ecosystem halt noch sehr sehr jung ist es gibt sehr viele libraries die stabil sind und benutzt werden aber es gibt auch sehr viele dinge die noch nicht 1.0 erreicht haben.\"\n- \"Aber natürlich, man kann wunderbar in Rust produktiv programmieren.\"\n- \"Für mich als nicht Rust Entwickler, von was sprechen wir da? Jetzt bei einem großen Projekt oder bei einem mittelgroßen Projekt sprechen wir da dann von Stunden?\"\n- \"Wenn du jetzt eine Applikation hast, sagen wir mal, die hat 100.000 Zeilen Code und du hast einen einigermaßen soliden Linux-Laptop beispielsweise und du nutzt ein paar Features wie vielleicht Serdy für Parsing, Ja dann bist du schon mal bei konzert peilzeiten vielleicht zwischen 40 sekunden und zwei drei minuten also das kann schon mal passieren ja je nachdem was du da benutzt und das summiert sich natürlich auf.\"\n- \"Auf dem neuen Apple M1, muss ich sagen, ist es auch viel viel besser geworden. Hardware tut dann natürlich sein Übriges, aber der Compiler wird auch selbst jedes Jahr um die 10% schneller, was ein guter Wert ist.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2386,"completion_tokens":462,"total_tokens":2848}}},{"status":"fulfilled","value":{"id":"chatcmpl-8O84pSvhhaPa1VV68eQivojnhDwY4","object":"chat.completion","created":1700761611,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"In Rust wird beispielsweise für jeden Input, den eine generische Funktion hat, eine konkrete Version zur Compile-Zeit gebaut.\"\n- \"Das ist ein Pattern.\" (bezogen auf das Builder-Pattern)\n- \"Ja, und das sind Modelle oder vielleicht auch Patterns, wenn man die so nennen will, die in Rust-Gang und Geber sind.\"\n- \"Wir haben ja schon in der Episode Was war's, Andi? 93 mit Barbara Liskov, wo wir gelernt haben, dass Vererbung ja böse ist.\"\n- \"Man kann schon Funktionsüberladung machen.\"\n- \"Aber es sind schon auch trotzdem Edge Cases, wo man wirklich sagt, okay, da macht das Sinn.\"\n- \"Und insgesamt gewöhnt man sich da aber sehr, sehr schnell dann an diese Art eher zu komponieren, also Composition über Inheritance zu machen.\"\n- \"Ja, das geht so in die Tiefe. Das macht mit uns keine Konkurrenz, wo wir immer nur an der Oberfläche da ein bisschen kratzen mit Andi vor allem.\"\n- \"Vielen lieben Dank, Matthias. Schön, auch mal etwas über eine andere Programmiersprache zu hören. Und ja, ich bin auch motiviert.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2465,"completion_tokens":276,"total_tokens":2741}}},{"status":"fulfilled","value":{"id":"chatcmpl-8O84pKKrNfMMzukFf8kNGaylvLSYw","object":"chat.completion","created":1700761611,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Ich wette noch, also meta-technisch jetzt hier, ich würde gerne noch die Frage stellen, wenn du eine, eine Ressource zum Lernen empfehlen würdest.\"\n- \"Der Y-Rust-Artikel ist nicht zum Lernen.\"\n- \"Wir haben echt technische Probleme heute.\"\n- \"Vielleicht weiß er, dass es geht und ihm ist es jetzt peinlich.\"\n- \"Mir ist das ein bisschen peinlich.\"\n- \"Wir haben einen Aufnahmetermin im Jahr. Wir haben zwei Gäste an diesem Tag und es fällt hier eins nach dem anderen aus.\"\n- \"Der ist auf eine Stunde zehn genau gedeimt, der Akku.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":757,"completion_tokens":150,"total_tokens":907}}}]}