[{"prompt":"You will be provided a part of a transcript of a podcast episode.\nYour task is to find quotable sections that are short and can be used in shorts on instagram or youtube.\nThe sections should adhere to one or more of the following properties:\n- funny\n- provocative\n- exlainatory\n- surprising\n- controversial\n- emotional\n- shocking\n- new\nOutput the list of sections in german.","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Wir haben heute ein sehr schräges Setup.\"\n- \"Ein bierernstes Thema, okay.\"\n- \"Rust ist eine systemnahe Programmiersprache von Mozilla.\"\n- \"Matthias begleitet mich ja tagtäglich eigentlich.\"\n- \"Wir hatten beide diverse Hackathon-Nächte mit Club Marte, Wodka und Helene Fischer um vier Uhr morgens.\"\n- \"Ich habe ein Fable für Entertainment und Storytelling.\"\n- \"Du hast dich vor kurzem selbstständig gemacht und bist Gründer einer Rust-Consulting-Firma namens Corode.\"\n- \"Du brennst für Open Source, so ähnlich wie ich, bist aber deutlich erfolgreicher.\"\n- \"Du hast einen Fast Async and Stream Based Link Checker in Rust geschrieben.\"\n- \"Du erzählst öfters mal recht lustige Storys auf Meetups.\"\n- \"Wir dürfen uns bald auf einen eigenen Podcast von dir namens Rust in Production freuen.\"\n- \"Rust ist eine art und weise programme zu schreiben wie man sie eigentlich vorher noch nicht hatte.\"\n- \"Rust ist eine Möglichkeit, Speicher auf andere Art zu verwalten.\"\n- \"Rust ist einfach eine stabilere Sprache.\"\n- \"Rust kann robusteren Code schreiben, der zur Laufzeit nicht viele Überraschungen bereithält.\"\n- \"Der Compiler ist so intelligent, er sagt mir Sachen, die ich noch nie mitbekommen habe bei irgendeiner anderen Sprache.\"\n- \"Wenn's baut, dann läuft's auch, und das ist auch in weiten Teilen sehr richtig.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Der Borrow Checker ist ein Teil des Rust-Compilers, der eben genau für Ownership und Borrowing zuständig ist und diese Regeln überprüft.\"\n- \"Es gibt allerdings auch mittlerweile einen WebAssembly-basierten Compiler. Nennt sich CraneLift und der ist etwas langsamer zu Runtime, also zu Laufzeit, aber schneller zu Compile-Zeit.\"\n- \"Da kannst du jetzt auch nicht sagen, dass sie als unsicher gilt. Die haben auch Features drin, wie zum Beispiel du hast einen Integer mit einem Wertebereich und wenn du dann ein Switch Case Statement hast, dann sagt der Compiler dir, hey, da ist ein Fall, der ist nicht berücksichtigt bei deinem Case, könnte zur Runtime krachen, compile ich den nicht.\"\n- \"Also Rust ist eine Multi-Paradigm-Programmiersprache. Man kann in Rust mehrere Paradigmen programmieren.\"\n- \"Also ich arbeite gerne objektorientiert im Großen und funktional im Kleinen in Rust.\"\n- \"Und warum hat Mozilla damals die Sprache entwickelt? Was ist der Hintergrund von dieser Sprache überhaupt?\"\n- \"Firefox, was ja in C++ geschrieben ist, einfach Probleme hat, die man sehr, sehr schwer in den Griff bekommt. Memory Leaks, aber auch Null Pointer, Exceptions und einfach Dinge, die zur Laufzeit passieren, die die Software instabil machen.\"\n- \"Rust ist einfach eine sehr, sehr gute Sprache, mit der man auch parallel programmieren kann, weil eben dieses Ownership-Modell diverse Fehlerklassen einfach komplett ausschließt.\"\n- \"Klassisch benutzt man Rust dann, wenn man, ich sage jetzt mal, irgendwo zwischen dem Hardware- und Software-Interface agiert.\"\n- \"Wenn es dann Richtung Stabilität geht, wird es auch spannend.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Muss ich vielleicht Over-Provisioning machen? Das heißt, brauche ich mehr Ressourcen, um so Latency-Peaks und vielleicht auch Usage-Peaks abzufangen? Und da wird es dann halt relativ spannend.\"\n- \"Der klassische Faktor ist ungefähr zwischen fünf und sieben, wo man sagt, das ist der Unterschied zwischen Java Runtime Performance und Rust Runtime Performance.\"\n- \"Also der Einstieg war schon extrem schwierig.\"\n- \"Das ist auch ein großer Kritikpunkt, wo ich sagen würde, eine Firma, die Rust einsetzt, muss sich bewusst sein, dass man da in Trainings und in Entwickler-Ausbildung investieren muss.\"\n- \"Der Klassiker ist zum Beispiel aus der C- oder C++-Ecke Leute, die Rust lernen, die haben Probleme mit diesem Ownership-Modell.\"\n- \"Und Leute, die interessanterweise eher aus der, ich sage jetzt mal, Python- oder vielleicht JavaScript-Ecke kommen, haben da relativ wenig Probleme damit, weil die diese Konzepte überhaupt gar nicht kennen.\"\n- \"Ja, Speicherkonzept in der Tat war für mich eigentlich relativ einfach zu verstehen. Oder man hat viel davon gehört, und für mich war das dann relativ logisch, ja.\"\n- \"Ich muss natürlich dazusagen, als klassischer Entwickler, der viel von sich hält, bin natürlich einfach drauf losgegangen, hab gedacht, das schaffe ich schon. Ich brauche da keine Dokumentation lesen oder mir mal den Syntax anschauen. Es kann nicht so schwierig sein, ist einfach eine Programmiersprache. Ja bin ziemlich auf die Pappen geflogen wie man bei uns sagt.\"\n- \"Rust ist schwierig, wenn man es schwierig macht und man macht es sich schwierig indem dass man gegen die Sprache kämpft.\"\n- \"Je früher man anfängt aufzuhören zu kämpfen und zu lernen wie diese Sprache wirklich funktioniert, desto leichter kann man sich das Leben machen.\"\n- \"Der Klassiker ist zum Beispiel aus der C- oder C++-Ecke Leute, die Rust lernen, haben Probleme mit diesem Ownership-Modell.\"\n- \"Und"},"finish_reason":"length"},{"index":0,"message":{"role":"assistant","content":"- \"Das heißt, es kann wirklich nur eine Funktion, ein Block, wie man es auch immer sieht, auf eine Ressource zugreifen.\"\n- \"Und ich glaube, das sind so Stützen, die man sich zunutze machen kann in Rust.\"\n- \"Und Rust ist in der Beziehung extrem explizit und will, dass schlimme Dinge nicht passieren.\"\n- \"Das heißt aber, wenn die Fernbedienung nicht zurückgeliefert wird, also nicht returned wird, dann kommt auch irgendwann Speichermanagement, Garbage Collector und removed meine Datei aus dem Speicher.\"\n- \"Es gibt keinen Garbage Collector, aber ähnlich wie in C mit Free gibt es in Rust einen Drop. Und dieses Drop wird automatisch ausgeführt und wird eingefügt an die Stelle, wo die Funktion beendet. Das heißt, wenn die Ownership verloren geht, dann wird automatisch getroppt.\"\n- \"Ganz genau. Und dieses Konzept gibt es auch aus C++ und das heißt eben dort Ray.\"\n- \"Aber Smart-Pointer haben die interessante Eigenschaft, dass sie etwas smarter sind als normale Pointer, was der Name ja schon sagt.\"\n- \"Und eigentlich ist damit die Pointer-Verwaltung viel viel sicherer.\"\n- \"Naja, man hat etwas, was vielleicht an mehreren Stellen gleichzeitig entweder lesend oder schreibend verwendet wird. Wenn es jetzt schreibend ist, dann ist die Frage, kann ich überhaupt an mehreren Stellen gleichzeitig schreiben?\"\n- \"Also wir nehmen jetzt mal ein typisches Beispiel von einer globalen Variable. Das ist eine Config für einen Server. Vielleicht will ich da nur lesend drauf zugreifen. Ja, dann ist das vielleicht vollkommen fein.\"\n- \"Aber wenn ich eine globale Variable habe, die vielleicht veränderlich ist, also schon ein Pointer zu einer File und ich habe mehrere Writer, dann muss ich diesen Datensatz, diesen Block im Speicher, muss ich auch irgendwie schützen.\"\n- \"Aber ist der mutex dann verpflichtend wenn ich eine globale variable mache.\"\n- \"Im schreibenden Fall ist auch wiederum das Problem, okay, wenn ich wirklich eine globale Variable haben will, dann komme ich natürlich in Konflikt mit diesem.\"\n-"},"finish_reason":"length"},{"index":0,"message":{"role":"assistant","content":"- \"Das klassische Entwicklermodell ist ja eigentlich, du programmierst was, compilest das, und du kriegst irgendwie eine komische kryptische Errormeldung.\"\n- \"Auf jeden Fall kopierst du dann die erste Stackoverflow-Antwort und jetzt die erste Chat-GPT-Antwort und dann geht's einfach weiter.\"\n- \"Und vom Copiler im Rust hört man nur Gutes. Der sagt dir genau diese Zeile, diese Stelle, das machst du falsch und das sollte der Code sein, der da stehen sollte.\"\n- \"Ist so ein Copilot, der aber recht hat.\"\n- \"Also verstehst du mehr die Fehler? Ich habe das Gefühl, umso mehr ich auf Stack Overflow bin, umso weniger nehme ich mir die Zeit, die Beschreibung zu lesen.\"\n- \"Sack-Fault. Period. That's it.\"\n- \"Also man wird generell defensiver, man wird aufmerksamer und checkt mehr nach Fehlern.\"\n- \"Man kann natürlich auch ein Unwrap machen und dann einfach auf den Fall hoffen, dass da wirklich auch ein Wert drin ist. Aber an der Stelle würde ich sagen, es ist auch da explizit, dass man diesen Fall irgendwie behandeln muss.\"\n- \"Und ich denke, man wird da in der Beziehung auch vom Compiler ein bisschen an die Hand genommen und besser geschult.\"\n- \"Ich hätte ganz gerne so ein Tool vor 15 Jahren gehabt, als ich das erste Mal C programmiert habe. Weil das wäre ein richtig guter Trainer gewesen, der einem sagt, was für Fehlerfälle passieren können.\"\n- \"Fundamental ist alles, was man am Computer macht, unsafe. Das ist einfach eine Realität des Lebens.\"\n- \"Man kann auch den Weg gehen und sagen, eigentlich ist alles schön der heile Welt und ich kümmere mich gar nicht darum, sondern ich gehe mal davon aus, alles ist safe.\"\n- \"Und dann gibt's diese dreckige Ecke da drüben, ja? Dieses unsafe Keyword, ja? Meine Frage ist, gibt es unsafe Rusts? Und was sind valide Anwendungsfälle dafür, sich in diese Ecke zu begeben?\"\n- \"Die Art und Weise, wie man Rust programmiert, ist eigentlich,"},"finish_reason":"length"},{"index":0,"message":{"role":"assistant","content":"- \"Die Leute haben das zum ersten Mal wirklich produktiv eingesetzt, haben dann festgestellt, es gibt ein paar Bugs, die man nur beheben kann, indem man ändert, was der Compiler macht.\"\n- \"Angenommen, ich schreibe jetzt Async und das ist aber jetzt ein Keyword in der neuesten Version, dann ist das ein Bricking Change.\"\n- \"Man hat sich echt ein interessantes Konzept einfallen lassen.\"\n- \"Die wird weiter verwaltet. Aber das ist für viele Leute besser, als wenn man die Legacy auslagert in die Applikationen, die Rust verwenden.\"\n- \"Und das war im Endeffekt Rust 1.0. Aber der ganze Compiler, die ganze Legacy ist da mit drin.\"\n- \"Das wäre ja fatal. Dann könnte man ja an sich nicht viel ändern, weil man immer gebunden wäre an diese Editions.\"\n- \"Wenn jetzt festgestellt wird, dass man etwas im Compiler ändern will, dann kann man einen sogenannten Crater Run machen.\"\n- \"Und da laufen Tage und Nacht große Maschinen, die Crater Runs machen und das komplette Ecosystem auf solche Änderungen checken.\"\n- \"Ja, Go macht etwas sehr, sehr ähnliches.\"\n- \"Also was man da vielleicht noch kurz anmerken will ist, dass Rust halt immer noch einen Schritt weiter geht.\"\n- \"Ja, also immer wenn wir von datengetriebenen Entscheidungen sprechen, Du kannst zwar immer noch von einer opinionated Implementierung sprechen, aber es ist halt schon sehr, sehr datenbasiert.\"\n- \"Das bedeutet natürlich leider nur Open-Source-Versionen, sind damit berücksichtigt, glaube ich.\"\n- \"Also ich finde es schon sehr spannend dass man diese Vernetzung der Welt einfach nutzt diese Daten die man heutzutage bekommt diese statistischen Daten von den Usern von der Usage ist schon sehr cool aber ich probiere mal.\"\n- \"Und zwar, ich bin aktuell gerade in so einem Gremium und wir diskutieren gerade über so einen Lehrplan für eine Schule, für einen Informatikzweig.\"\n- \"Wie schafft Rust dieses marketing dass alle leute irgendwie über rast sprechen und ich kenne ganz wenig leute die wirklich rast mal prob"},"finish_reason":"length"},{"index":0,"message":{"role":"assistant","content":"- Die Compiler-Meldungen, gerade wenn man an C und C++ denkt, sind manchmal so kryptisch, dass du keine Ahnung hast und überhaupt mal ewig lang probieren musst, überhaupt zu verstehen, was denn da das Problem ist.\n- Glaubst du, dass sich da irgendwas in Zukunft auch noch verändert? Wird Rust irgendwann so die Massensprache oder bleibt es einfach für die, ich sag mal, Nische oder für diesen Spezialbereich von großer Performance, Hardware nahe?\n- Es wird nicht soweit kommen, dass Rust vielleicht Javascript oder TypeScript ... Es wird nicht das neue Javascript werden.\n- Der Andi ist nur ehrlich in seinem Job, obwohl er Geld verdient. Wir sind ja alle ehrlich. Du kriegst eine ehrliche Antwort.\n- Die Async-Ecosystem ist natürlich noch sehr, sehr jung.\n- Das ist irgendwie... Ja, also nur Teile davon sind standardisiert. Das Async und the Wait Keyword ist standardisiert. Futures, das ist ein Trade, ist standardisiert und das ist alles in der Standard Library.\n- Es ändert auf jeden Fall die Art und Weise, wie man Rust programmiert. Es ist fast wie ein Dialekt.\n- Das ist halt die große Gefahr, weil dieses System noch relativ neu ist. Der Bereich von Rust ist natürlich noch... ich würde fast sagen, experimentell.\n- Aber natürlich, man kann wunderbar in Rust produktiv programmieren.\n- Die Compiletimes sind ein Riesenproblem, vor allen Dingen bei großen Applikationen.\n- Aber wenn du jetzt eine Applikation hast, sagen wir mal, die hat 100.000 Zeilen Code und du hast einen einigermaßen soliden Linux-Laptop beispielsweise und du nutzt ein paar Features wie vielleicht Serdy für Parsing, dann bist du schon mal bei konzert peilzeiten vielleicht zwischen 40 sekunden und zwei drei minuten also das kann schon mal passieren ja je nachdem was du da benutzt und das summiert sich natürlich auf.\n- Auch der Rust-Compiler wird schneller, man kann es kaum glauben. Auf dem neuen Apple M1, muss ich sagen, ist es auch viel viel besser geworden. Hardware tut dann natürlich sein Übriges, aber der Compiler wird auch"},"finish_reason":"length"},{"index":0,"message":{"role":"assistant","content":"1. \"In Rust wird beispielsweise für jeden Input, den eine generische Funktion hat, eine konkrete Version zur Compile-Zeit gebaut.\" \n2. \"Und das kostet natürlich Zeit.\" \n3. \"Go hat das eigene Backend, die haben selber eins geschrieben und das ist auch in Go geschrieben mittlerweile\" \n4. \"Und Rust basiert halt auf LLVM, was in C++ geschrieben ist.\" \n5. \"Wenn du jetzt keine multimillionen Lines-of-Code Rust-Application hast, dann spielen auch auf CI-Systemen die Compiletines nicht wirklich eine Rolle.\" \n6. \"Objektorientierung wird grundsätzlich unterstützt.\" \n7. \"Aber ist jetzt keine Hardcore-Objektorientierung mit Polymorphie und die ganzen Geschichten?\" \n8. \"Funktionsüberladung gibt's.\" \n9. \"Insofern ist nur ein Beweis mehr, dass Vererbung gar nicht mehr so das Nonplusultra ist, wie es früher mal war, meiner Meinung nach.\" \n10. \"Wir haben ja schon in der Episode Was war's, Andi? 93 mit Barbara Liskov, wo wir gelernt haben, dass Vererbung ja böse ist.\" \n11. \"Jeder möchte Rust lernen und niemand hat Zeit.\" \n12. \"Was ist die eine Ressource, die du den Hörerinnen und Hörern und inklusive mir empfehlen würdest, wenn ich zwei Stunden pro Woche investieren möchte, um Rust zu lernen?\" \n13. \"Deinen YouTube-Kanal natürlich mit den alten Videos anschauen.\" \n14. \"Eine Ressource, die man sich anschauen kann, ist von einem Freund von mir, Luca Palmieri, Zero to Production in Rust.\" \n15. \"Vielen lieben Dank, Matthias, für deine ganzen Insights und deine Details.\" \n16. \"Jetzt bin ich doch wieder ein bisschen motiviert, Rust irgendwie zu lernen.\" \n17. \"Und ja, ich bin auch motiviert.\" \n18. \"Schön, auch mal etwas über eine andere Programmiersprache zu hören.\" \n19. \"Und falls ihr uns noch nicht auf den gängigen Plattformen wie Apple Music Oder Spotify heißt die andere Plattform"},"finish_reason":"length"},{"index":0,"message":{"role":"assistant","content":"- \"Ihr wolltet Ende machen. Also, muss ich schon Ende machen?\"\n- \"Der Y-Rust-Artikel ist nicht zum Lernen.\"\n- \"Die Batterie ist kurz leer. Nur Amateure.\"\n- \"Der Kollege aus diesem kleinen Land namens Austria ist das Problem.\"\n- \"Ja, USB hat schon zum Übertragen, aber ich bin mir nicht sicher, ob das zum Strom geht.\"\n- \"Mir ist das ein bisschen peinlich. Schon wieder live.\"\n- \"Wir haben einen Aufnahmetermin im Jahr. Wir haben zwei Gäste an diesem Tag und es fällt hier eins nach dem anderen aus.\"\n- \"Es hat nicht durchgehalten, weil du so viel redest.\"\n- \"Y-Rost.\""},"finish_reason":"stop"}],"results":[{"status":"fulfilled","value":{"id":"chatcmpl-8OCTRBJDoj0OiIO4de8PVgi7h6fEz","object":"chat.completion","created":1700778513,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Wir haben heute ein sehr schräges Setup.\"\n- \"Ein bierernstes Thema, okay.\"\n- \"Rust ist eine systemnahe Programmiersprache von Mozilla.\"\n- \"Matthias begleitet mich ja tagtäglich eigentlich.\"\n- \"Wir hatten beide diverse Hackathon-Nächte mit Club Marte, Wodka und Helene Fischer um vier Uhr morgens.\"\n- \"Ich habe ein Fable für Entertainment und Storytelling.\"\n- \"Du hast dich vor kurzem selbstständig gemacht und bist Gründer einer Rust-Consulting-Firma namens Corode.\"\n- \"Du brennst für Open Source, so ähnlich wie ich, bist aber deutlich erfolgreicher.\"\n- \"Du hast einen Fast Async and Stream Based Link Checker in Rust geschrieben.\"\n- \"Du erzählst öfters mal recht lustige Storys auf Meetups.\"\n- \"Wir dürfen uns bald auf einen eigenen Podcast von dir namens Rust in Production freuen.\"\n- \"Rust ist eine art und weise programme zu schreiben wie man sie eigentlich vorher noch nicht hatte.\"\n- \"Rust ist eine Möglichkeit, Speicher auf andere Art zu verwalten.\"\n- \"Rust ist einfach eine stabilere Sprache.\"\n- \"Rust kann robusteren Code schreiben, der zur Laufzeit nicht viele Überraschungen bereithält.\"\n- \"Der Compiler ist so intelligent, er sagt mir Sachen, die ich noch nie mitbekommen habe bei irgendeiner anderen Sprache.\"\n- \"Wenn's baut, dann läuft's auch, und das ist auch in weiten Teilen sehr richtig.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2418,"completion_tokens":347,"total_tokens":2765}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCTRwSjed0uGlrqvxdS31NOPDwwG","object":"chat.completion","created":1700778513,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Der Borrow Checker ist ein Teil des Rust-Compilers, der eben genau für Ownership und Borrowing zuständig ist und diese Regeln überprüft.\"\n- \"Es gibt allerdings auch mittlerweile einen WebAssembly-basierten Compiler. Nennt sich CraneLift und der ist etwas langsamer zu Runtime, also zu Laufzeit, aber schneller zu Compile-Zeit.\"\n- \"Da kannst du jetzt auch nicht sagen, dass sie als unsicher gilt. Die haben auch Features drin, wie zum Beispiel du hast einen Integer mit einem Wertebereich und wenn du dann ein Switch Case Statement hast, dann sagt der Compiler dir, hey, da ist ein Fall, der ist nicht berücksichtigt bei deinem Case, könnte zur Runtime krachen, compile ich den nicht.\"\n- \"Also Rust ist eine Multi-Paradigm-Programmiersprache. Man kann in Rust mehrere Paradigmen programmieren.\"\n- \"Also ich arbeite gerne objektorientiert im Großen und funktional im Kleinen in Rust.\"\n- \"Und warum hat Mozilla damals die Sprache entwickelt? Was ist der Hintergrund von dieser Sprache überhaupt?\"\n- \"Firefox, was ja in C++ geschrieben ist, einfach Probleme hat, die man sehr, sehr schwer in den Griff bekommt. Memory Leaks, aber auch Null Pointer, Exceptions und einfach Dinge, die zur Laufzeit passieren, die die Software instabil machen.\"\n- \"Rust ist einfach eine sehr, sehr gute Sprache, mit der man auch parallel programmieren kann, weil eben dieses Ownership-Modell diverse Fehlerklassen einfach komplett ausschließt.\"\n- \"Klassisch benutzt man Rust dann, wenn man, ich sage jetzt mal, irgendwo zwischen dem Hardware- und Software-Interface agiert.\"\n- \"Wenn es dann Richtung Stabilität geht, wird es auch spannend.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2424,"completion_tokens":405,"total_tokens":2829}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCTRfzpcHtEwUynOT6KBm8ILFtsZ","object":"chat.completion","created":1700778513,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Muss ich vielleicht Over-Provisioning machen? Das heißt, brauche ich mehr Ressourcen, um so Latency-Peaks und vielleicht auch Usage-Peaks abzufangen? Und da wird es dann halt relativ spannend.\"\n- \"Der klassische Faktor ist ungefähr zwischen fünf und sieben, wo man sagt, das ist der Unterschied zwischen Java Runtime Performance und Rust Runtime Performance.\"\n- \"Also der Einstieg war schon extrem schwierig.\"\n- \"Das ist auch ein großer Kritikpunkt, wo ich sagen würde, eine Firma, die Rust einsetzt, muss sich bewusst sein, dass man da in Trainings und in Entwickler-Ausbildung investieren muss.\"\n- \"Der Klassiker ist zum Beispiel aus der C- oder C++-Ecke Leute, die Rust lernen, die haben Probleme mit diesem Ownership-Modell.\"\n- \"Und Leute, die interessanterweise eher aus der, ich sage jetzt mal, Python- oder vielleicht JavaScript-Ecke kommen, haben da relativ wenig Probleme damit, weil die diese Konzepte überhaupt gar nicht kennen.\"\n- \"Ja, Speicherkonzept in der Tat war für mich eigentlich relativ einfach zu verstehen. Oder man hat viel davon gehört, und für mich war das dann relativ logisch, ja.\"\n- \"Ich muss natürlich dazusagen, als klassischer Entwickler, der viel von sich hält, bin natürlich einfach drauf losgegangen, hab gedacht, das schaffe ich schon. Ich brauche da keine Dokumentation lesen oder mir mal den Syntax anschauen. Es kann nicht so schwierig sein, ist einfach eine Programmiersprache. Ja bin ziemlich auf die Pappen geflogen wie man bei uns sagt.\"\n- \"Rust ist schwierig, wenn man es schwierig macht und man macht es sich schwierig indem dass man gegen die Sprache kämpft.\"\n- \"Je früher man anfängt aufzuhören zu kämpfen und zu lernen wie diese Sprache wirklich funktioniert, desto leichter kann man sich das Leben machen.\"\n- \"Der Klassiker ist zum Beispiel aus der C- oder C++-Ecke Leute, die Rust lernen, haben Probleme mit diesem Ownership-Modell.\"\n- \"Und"},"finish_reason":"length"}],"usage":{"prompt_tokens":2408,"completion_tokens":500,"total_tokens":2908}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCTR209xGMuQzHLVFICD1PpVjf7Y","object":"chat.completion","created":1700778513,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Das heißt, es kann wirklich nur eine Funktion, ein Block, wie man es auch immer sieht, auf eine Ressource zugreifen.\"\n- \"Und ich glaube, das sind so Stützen, die man sich zunutze machen kann in Rust.\"\n- \"Und Rust ist in der Beziehung extrem explizit und will, dass schlimme Dinge nicht passieren.\"\n- \"Das heißt aber, wenn die Fernbedienung nicht zurückgeliefert wird, also nicht returned wird, dann kommt auch irgendwann Speichermanagement, Garbage Collector und removed meine Datei aus dem Speicher.\"\n- \"Es gibt keinen Garbage Collector, aber ähnlich wie in C mit Free gibt es in Rust einen Drop. Und dieses Drop wird automatisch ausgeführt und wird eingefügt an die Stelle, wo die Funktion beendet. Das heißt, wenn die Ownership verloren geht, dann wird automatisch getroppt.\"\n- \"Ganz genau. Und dieses Konzept gibt es auch aus C++ und das heißt eben dort Ray.\"\n- \"Aber Smart-Pointer haben die interessante Eigenschaft, dass sie etwas smarter sind als normale Pointer, was der Name ja schon sagt.\"\n- \"Und eigentlich ist damit die Pointer-Verwaltung viel viel sicherer.\"\n- \"Naja, man hat etwas, was vielleicht an mehreren Stellen gleichzeitig entweder lesend oder schreibend verwendet wird. Wenn es jetzt schreibend ist, dann ist die Frage, kann ich überhaupt an mehreren Stellen gleichzeitig schreiben?\"\n- \"Also wir nehmen jetzt mal ein typisches Beispiel von einer globalen Variable. Das ist eine Config für einen Server. Vielleicht will ich da nur lesend drauf zugreifen. Ja, dann ist das vielleicht vollkommen fein.\"\n- \"Aber wenn ich eine globale Variable habe, die vielleicht veränderlich ist, also schon ein Pointer zu einer File und ich habe mehrere Writer, dann muss ich diesen Datensatz, diesen Block im Speicher, muss ich auch irgendwie schützen.\"\n- \"Aber ist der mutex dann verpflichtend wenn ich eine globale variable mache.\"\n- \"Im schreibenden Fall ist auch wiederum das Problem, okay, wenn ich wirklich eine globale Variable haben will, dann komme ich natürlich in Konflikt mit diesem.\"\n-"},"finish_reason":"length"}],"usage":{"prompt_tokens":2335,"completion_tokens":500,"total_tokens":2835}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCTR9005oJVHiUe83I8E0cW5Ni15","object":"chat.completion","created":1700778513,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Das klassische Entwicklermodell ist ja eigentlich, du programmierst was, compilest das, und du kriegst irgendwie eine komische kryptische Errormeldung.\"\n- \"Auf jeden Fall kopierst du dann die erste Stackoverflow-Antwort und jetzt die erste Chat-GPT-Antwort und dann geht's einfach weiter.\"\n- \"Und vom Copiler im Rust hört man nur Gutes. Der sagt dir genau diese Zeile, diese Stelle, das machst du falsch und das sollte der Code sein, der da stehen sollte.\"\n- \"Ist so ein Copilot, der aber recht hat.\"\n- \"Also verstehst du mehr die Fehler? Ich habe das Gefühl, umso mehr ich auf Stack Overflow bin, umso weniger nehme ich mir die Zeit, die Beschreibung zu lesen.\"\n- \"Sack-Fault. Period. That's it.\"\n- \"Also man wird generell defensiver, man wird aufmerksamer und checkt mehr nach Fehlern.\"\n- \"Man kann natürlich auch ein Unwrap machen und dann einfach auf den Fall hoffen, dass da wirklich auch ein Wert drin ist. Aber an der Stelle würde ich sagen, es ist auch da explizit, dass man diesen Fall irgendwie behandeln muss.\"\n- \"Und ich denke, man wird da in der Beziehung auch vom Compiler ein bisschen an die Hand genommen und besser geschult.\"\n- \"Ich hätte ganz gerne so ein Tool vor 15 Jahren gehabt, als ich das erste Mal C programmiert habe. Weil das wäre ein richtig guter Trainer gewesen, der einem sagt, was für Fehlerfälle passieren können.\"\n- \"Fundamental ist alles, was man am Computer macht, unsafe. Das ist einfach eine Realität des Lebens.\"\n- \"Man kann auch den Weg gehen und sagen, eigentlich ist alles schön der heile Welt und ich kümmere mich gar nicht darum, sondern ich gehe mal davon aus, alles ist safe.\"\n- \"Und dann gibt's diese dreckige Ecke da drüben, ja? Dieses unsafe Keyword, ja? Meine Frage ist, gibt es unsafe Rusts? Und was sind valide Anwendungsfälle dafür, sich in diese Ecke zu begeben?\"\n- \"Die Art und Weise, wie man Rust programmiert, ist eigentlich,"},"finish_reason":"length"}],"usage":{"prompt_tokens":2420,"completion_tokens":500,"total_tokens":2920}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCTRdejI6VdO7D2RUG0s88BMaLxb","object":"chat.completion","created":1700778513,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Die Leute haben das zum ersten Mal wirklich produktiv eingesetzt, haben dann festgestellt, es gibt ein paar Bugs, die man nur beheben kann, indem man ändert, was der Compiler macht.\"\n- \"Angenommen, ich schreibe jetzt Async und das ist aber jetzt ein Keyword in der neuesten Version, dann ist das ein Bricking Change.\"\n- \"Man hat sich echt ein interessantes Konzept einfallen lassen.\"\n- \"Die wird weiter verwaltet. Aber das ist für viele Leute besser, als wenn man die Legacy auslagert in die Applikationen, die Rust verwenden.\"\n- \"Und das war im Endeffekt Rust 1.0. Aber der ganze Compiler, die ganze Legacy ist da mit drin.\"\n- \"Das wäre ja fatal. Dann könnte man ja an sich nicht viel ändern, weil man immer gebunden wäre an diese Editions.\"\n- \"Wenn jetzt festgestellt wird, dass man etwas im Compiler ändern will, dann kann man einen sogenannten Crater Run machen.\"\n- \"Und da laufen Tage und Nacht große Maschinen, die Crater Runs machen und das komplette Ecosystem auf solche Änderungen checken.\"\n- \"Ja, Go macht etwas sehr, sehr ähnliches.\"\n- \"Also was man da vielleicht noch kurz anmerken will ist, dass Rust halt immer noch einen Schritt weiter geht.\"\n- \"Ja, also immer wenn wir von datengetriebenen Entscheidungen sprechen, Du kannst zwar immer noch von einer opinionated Implementierung sprechen, aber es ist halt schon sehr, sehr datenbasiert.\"\n- \"Das bedeutet natürlich leider nur Open-Source-Versionen, sind damit berücksichtigt, glaube ich.\"\n- \"Also ich finde es schon sehr spannend dass man diese Vernetzung der Welt einfach nutzt diese Daten die man heutzutage bekommt diese statistischen Daten von den Usern von der Usage ist schon sehr cool aber ich probiere mal.\"\n- \"Und zwar, ich bin aktuell gerade in so einem Gremium und wir diskutieren gerade über so einen Lehrplan für eine Schule, für einen Informatikzweig.\"\n- \"Wie schafft Rust dieses marketing dass alle leute irgendwie über rast sprechen und ich kenne ganz wenig leute die wirklich rast mal prob"},"finish_reason":"length"}],"usage":{"prompt_tokens":2367,"completion_tokens":500,"total_tokens":2867}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCTRcDxlAXWQel0CrN8ifKgGGGst","object":"chat.completion","created":1700778513,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- Die Compiler-Meldungen, gerade wenn man an C und C++ denkt, sind manchmal so kryptisch, dass du keine Ahnung hast und überhaupt mal ewig lang probieren musst, überhaupt zu verstehen, was denn da das Problem ist.\n- Glaubst du, dass sich da irgendwas in Zukunft auch noch verändert? Wird Rust irgendwann so die Massensprache oder bleibt es einfach für die, ich sag mal, Nische oder für diesen Spezialbereich von großer Performance, Hardware nahe?\n- Es wird nicht soweit kommen, dass Rust vielleicht Javascript oder TypeScript ... Es wird nicht das neue Javascript werden.\n- Der Andi ist nur ehrlich in seinem Job, obwohl er Geld verdient. Wir sind ja alle ehrlich. Du kriegst eine ehrliche Antwort.\n- Die Async-Ecosystem ist natürlich noch sehr, sehr jung.\n- Das ist irgendwie... Ja, also nur Teile davon sind standardisiert. Das Async und the Wait Keyword ist standardisiert. Futures, das ist ein Trade, ist standardisiert und das ist alles in der Standard Library.\n- Es ändert auf jeden Fall die Art und Weise, wie man Rust programmiert. Es ist fast wie ein Dialekt.\n- Das ist halt die große Gefahr, weil dieses System noch relativ neu ist. Der Bereich von Rust ist natürlich noch... ich würde fast sagen, experimentell.\n- Aber natürlich, man kann wunderbar in Rust produktiv programmieren.\n- Die Compiletimes sind ein Riesenproblem, vor allen Dingen bei großen Applikationen.\n- Aber wenn du jetzt eine Applikation hast, sagen wir mal, die hat 100.000 Zeilen Code und du hast einen einigermaßen soliden Linux-Laptop beispielsweise und du nutzt ein paar Features wie vielleicht Serdy für Parsing, dann bist du schon mal bei konzert peilzeiten vielleicht zwischen 40 sekunden und zwei drei minuten also das kann schon mal passieren ja je nachdem was du da benutzt und das summiert sich natürlich auf.\n- Auch der Rust-Compiler wird schneller, man kann es kaum glauben. Auf dem neuen Apple M1, muss ich sagen, ist es auch viel viel besser geworden. Hardware tut dann natürlich sein Übriges, aber der Compiler wird auch"},"finish_reason":"length"}],"usage":{"prompt_tokens":2386,"completion_tokens":500,"total_tokens":2886}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCTRTFyiiUeKtJYGE8STY92uWH8d","object":"chat.completion","created":1700778513,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"1. \"In Rust wird beispielsweise für jeden Input, den eine generische Funktion hat, eine konkrete Version zur Compile-Zeit gebaut.\" \n2. \"Und das kostet natürlich Zeit.\" \n3. \"Go hat das eigene Backend, die haben selber eins geschrieben und das ist auch in Go geschrieben mittlerweile\" \n4. \"Und Rust basiert halt auf LLVM, was in C++ geschrieben ist.\" \n5. \"Wenn du jetzt keine multimillionen Lines-of-Code Rust-Application hast, dann spielen auch auf CI-Systemen die Compiletines nicht wirklich eine Rolle.\" \n6. \"Objektorientierung wird grundsätzlich unterstützt.\" \n7. \"Aber ist jetzt keine Hardcore-Objektorientierung mit Polymorphie und die ganzen Geschichten?\" \n8. \"Funktionsüberladung gibt's.\" \n9. \"Insofern ist nur ein Beweis mehr, dass Vererbung gar nicht mehr so das Nonplusultra ist, wie es früher mal war, meiner Meinung nach.\" \n10. \"Wir haben ja schon in der Episode Was war's, Andi? 93 mit Barbara Liskov, wo wir gelernt haben, dass Vererbung ja böse ist.\" \n11. \"Jeder möchte Rust lernen und niemand hat Zeit.\" \n12. \"Was ist die eine Ressource, die du den Hörerinnen und Hörern und inklusive mir empfehlen würdest, wenn ich zwei Stunden pro Woche investieren möchte, um Rust zu lernen?\" \n13. \"Deinen YouTube-Kanal natürlich mit den alten Videos anschauen.\" \n14. \"Eine Ressource, die man sich anschauen kann, ist von einem Freund von mir, Luca Palmieri, Zero to Production in Rust.\" \n15. \"Vielen lieben Dank, Matthias, für deine ganzen Insights und deine Details.\" \n16. \"Jetzt bin ich doch wieder ein bisschen motiviert, Rust irgendwie zu lernen.\" \n17. \"Und ja, ich bin auch motiviert.\" \n18. \"Schön, auch mal etwas über eine andere Programmiersprache zu hören.\" \n19. \"Und falls ihr uns noch nicht auf den gängigen Plattformen wie Apple Music Oder Spotify heißt die andere Plattform"},"finish_reason":"length"}],"usage":{"prompt_tokens":2465,"completion_tokens":500,"total_tokens":2965}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCTRhdMEoNwzgCtdIetrQcuX03W0","object":"chat.completion","created":1700778513,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Ihr wolltet Ende machen. Also, muss ich schon Ende machen?\"\n- \"Der Y-Rust-Artikel ist nicht zum Lernen.\"\n- \"Die Batterie ist kurz leer. Nur Amateure.\"\n- \"Der Kollege aus diesem kleinen Land namens Austria ist das Problem.\"\n- \"Ja, USB hat schon zum Übertragen, aber ich bin mir nicht sicher, ob das zum Strom geht.\"\n- \"Mir ist das ein bisschen peinlich. Schon wieder live.\"\n- \"Wir haben einen Aufnahmetermin im Jahr. Wir haben zwei Gäste an diesem Tag und es fällt hier eins nach dem anderen aus.\"\n- \"Es hat nicht durchgehalten, weil du so viel redest.\"\n- \"Y-Rost.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":757,"completion_tokens":158,"total_tokens":915}}}]},{"prompt":"You will be provided a list of quotes.\nYour task is to select the 10 most interesting quotes regarding the following properties:\n- funny\n- provocative\n- exlainatory\n- surprising\n- controversial\n- emotional\n- shocking\n- new\nProvide a list of selected quotes in German without any additional context or modifications.","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Wir haben heute ein sehr schräges Setup.\"\n- \"Ein bierernstes Thema, okay.\"\n- \"Wir hatten beide diverse Hackathon-Nächte mit Club Marte, Wodka und Helene Fischer um vier Uhr morgens.\"\n- \"Du hast dich vor kurzem selbstständig gemacht und bist Gründer einer Rust-Consulting-Firma namens Corode.\"\n- \"Du brennst für Open Source, so ähnlich wie ich, bist aber deutlich erfolgreicher.\"\n- \"Der Compiler ist so intelligent, er sagt mir Sachen, die ich noch nie mitbekommen habe bei irgendeiner anderen Sprache.\"\n- \"Rust ist einfach eine extrem gute Sprache, mit der man auch parallel programmieren kann, weil eben dieses Ownership-Modell diverse Fehlerklassen einfach komplett ausschließt.\"\n- \"Der Einstieg war schon extrem schwierig.\"\n- \"Der Klassiker ist zum Beispiel aus der C- oder C++-Ecke Leute, die Rust lernen, haben Probleme mit diesem Ownership-Modell.\"\n- \"Rust ist schwierig, wenn man es schwierig macht und man macht es sich schwierig indem dass man gegen die Sprache kämpft.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Ja, Go macht etwas sehr, sehr ähnliches.\"\n- \"Also was man da vielleicht noch kurz anmerken will ist, dass Rust halt immer noch einen Schritt weiter geht.\"\n- \"Ja, also immer wenn wir von datengetriebenen Entscheidungen sprechen, Du kannst zwar immer noch von einer opinionated Implementierung sprechen, aber es ist halt schon sehr, sehr datenbasiert.\"\n- \"Also ich finde es schon sehr spannend dass man diese Vernetzung der Welt einfach nutzt diese Daten die man heutzutage bekommt diese statistischen Daten von den Usern von der Usage ist schon sehr cool aber ich probiere mal.\"\n- \"Wie schafft Rust dieses marketing dass alle leute irgendwie über rast sprechen und ich kenne ganz wenig leute die wirklich rast mal prob\"\n- \"Es ändert auf jeden Fall die Art und Weise, wie man Rust programmiert. Es ist fast wie ein Dialekt.\"\n- \"Das ist halt die große Gefahr, weil dieses System noch relativ neu ist. Der Bereich von Rust ist natürlich noch... ich würde fast sagen, experimentell.\"\n- \"Die Compiletimes sind ein Riesenproblem, vor allen Dingen bei großen Applikationen.\"\n- \"Aber wenn du jetzt eine Applikation hast, sagen wir mal, die hat 100.000 Zeilen Code und du hast einen einigermaßen soliden Linux-Laptop beispielsweise und du nutzt ein paar Features wie vielleicht Serdy für Parsing, dann bist du schon mal bei konzert peilzeiten vielleicht zwischen 40 sekunden und zwei drei minuten also das kann schon mal passieren ja je nachdem was du da benutzt und das summiert sich natürlich auf.\"\n- \"Aber ist jetzt keine Hardcore-Objektorientierung mit Polymorphie und die ganzen Geschichten?\""},"finish_reason":"stop"}],"results":[{"status":"fulfilled","value":{"id":"chatcmpl-8OCUZUannKdRRd3UG4rVVxyAJKzN7","object":"chat.completion","created":1700778583,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Wir haben heute ein sehr schräges Setup.\"\n- \"Ein bierernstes Thema, okay.\"\n- \"Wir hatten beide diverse Hackathon-Nächte mit Club Marte, Wodka und Helene Fischer um vier Uhr morgens.\"\n- \"Du hast dich vor kurzem selbstständig gemacht und bist Gründer einer Rust-Consulting-Firma namens Corode.\"\n- \"Du brennst für Open Source, so ähnlich wie ich, bist aber deutlich erfolgreicher.\"\n- \"Der Compiler ist so intelligent, er sagt mir Sachen, die ich noch nie mitbekommen habe bei irgendeiner anderen Sprache.\"\n- \"Rust ist einfach eine extrem gute Sprache, mit der man auch parallel programmieren kann, weil eben dieses Ownership-Modell diverse Fehlerklassen einfach komplett ausschließt.\"\n- \"Der Einstieg war schon extrem schwierig.\"\n- \"Der Klassiker ist zum Beispiel aus der C- oder C++-Ecke Leute, die Rust lernen, haben Probleme mit diesem Ownership-Modell.\"\n- \"Rust ist schwierig, wenn man es schwierig macht und man macht es sich schwierig indem dass man gegen die Sprache kämpft.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2503,"completion_tokens":261,"total_tokens":2764}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCUZTpnAiBjJh7mwUwuBzeR9WAIu","object":"chat.completion","created":1700778583,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Ja, Go macht etwas sehr, sehr ähnliches.\"\n- \"Also was man da vielleicht noch kurz anmerken will ist, dass Rust halt immer noch einen Schritt weiter geht.\"\n- \"Ja, also immer wenn wir von datengetriebenen Entscheidungen sprechen, Du kannst zwar immer noch von einer opinionated Implementierung sprechen, aber es ist halt schon sehr, sehr datenbasiert.\"\n- \"Also ich finde es schon sehr spannend dass man diese Vernetzung der Welt einfach nutzt diese Daten die man heutzutage bekommt diese statistischen Daten von den Usern von der Usage ist schon sehr cool aber ich probiere mal.\"\n- \"Wie schafft Rust dieses marketing dass alle leute irgendwie über rast sprechen und ich kenne ganz wenig leute die wirklich rast mal prob\"\n- \"Es ändert auf jeden Fall die Art und Weise, wie man Rust programmiert. Es ist fast wie ein Dialekt.\"\n- \"Das ist halt die große Gefahr, weil dieses System noch relativ neu ist. Der Bereich von Rust ist natürlich noch... ich würde fast sagen, experimentell.\"\n- \"Die Compiletimes sind ein Riesenproblem, vor allen Dingen bei großen Applikationen.\"\n- \"Aber wenn du jetzt eine Applikation hast, sagen wir mal, die hat 100.000 Zeilen Code und du hast einen einigermaßen soliden Linux-Laptop beispielsweise und du nutzt ein paar Features wie vielleicht Serdy für Parsing, dann bist du schon mal bei konzert peilzeiten vielleicht zwischen 40 sekunden und zwei drei minuten also das kann schon mal passieren ja je nachdem was du da benutzt und das summiert sich natürlich auf.\"\n- \"Aber ist jetzt keine Hardcore-Objektorientierung mit Polymorphie und die ganzen Geschichten?\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":1571,"completion_tokens":396,"total_tokens":1967}}}]},{"prompt":"You will be provided a list of quotes.\nYour task is to select the 10 most interesting quotes regarding the following properties:\n- funny\n- provocative\n- exlainatory\n- surprising\n- controversial\n- emotional\n- shocking\n- new\nProvide a list of selected quotes in German without any additional context or modifications.","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Wir haben heute ein sehr schräges Setup.\"\n- \"Ein bierernstes Thema, okay.\"\n- \"Wir hatten beide diverse Hackathon-Nächte mit Club Marte, Wodka und Helene Fischer um vier Uhr morgens.\"\n- \"Du hast dich vor kurzem selbstständig gemacht und bist Gründer einer Rust-Consulting-Firma namens Corode.\"\n- \"Du brennst für Open Source, so ähnlich wie ich, bist aber deutlich erfolgreicher.\"\n- \"Der Compiler ist so intelligent, er sagt mir Sachen, die ich noch nie mitbekommen habe bei irgendeiner anderen Sprache.\"\n- \"Rust ist einfach eine extrem gute Sprache, mit der man auch parallel programmieren kann, weil eben dieses Ownership-Modell diverse Fehlerklassen einfach komplett ausschließt.\"\n- \"Der Einstieg war schon extrem schwierig.\"\n- \"Der Klassiker ist zum Beispiel aus der C- oder C++-Ecke Leute, die Rust lernen, haben Probleme mit diesem Ownership-Modell.\"\n- \"Rust ist schwierig, wenn man es schwierig macht und man macht es sich schwierig indem dass man gegen die Sprache kämpft.\""},"finish_reason":"stop"}],"results":[{"status":"fulfilled","value":{"id":"chatcmpl-8OCVS323NRLr1GerM0EiAtKlHbAjW","object":"chat.completion","created":1700778638,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Wir haben heute ein sehr schräges Setup.\"\n- \"Ein bierernstes Thema, okay.\"\n- \"Wir hatten beide diverse Hackathon-Nächte mit Club Marte, Wodka und Helene Fischer um vier Uhr morgens.\"\n- \"Du hast dich vor kurzem selbstständig gemacht und bist Gründer einer Rust-Consulting-Firma namens Corode.\"\n- \"Du brennst für Open Source, so ähnlich wie ich, bist aber deutlich erfolgreicher.\"\n- \"Der Compiler ist so intelligent, er sagt mir Sachen, die ich noch nie mitbekommen habe bei irgendeiner anderen Sprache.\"\n- \"Rust ist einfach eine extrem gute Sprache, mit der man auch parallel programmieren kann, weil eben dieses Ownership-Modell diverse Fehlerklassen einfach komplett ausschließt.\"\n- \"Der Einstieg war schon extrem schwierig.\"\n- \"Der Klassiker ist zum Beispiel aus der C- oder C++-Ecke Leute, die Rust lernen, haben Probleme mit diesem Ownership-Modell.\"\n- \"Rust ist schwierig, wenn man es schwierig macht und man macht es sich schwierig indem dass man gegen die Sprache kämpft.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":737,"completion_tokens":261,"total_tokens":998}}}]}]