[{"prompt":"You will be provided a part of a transcript of a podcast episode.\nYour task is to find quotable sections that are short and can be used in shorts on instagram or youtube.\nThe sections should adhere to one or more of the following properties:\n- funny\n- provocative\n- exlainatory\n- surprising\n- controversial\n- emotional\n- shocking\n- new\nOutput the list of sections in german.","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Also, wer dieses grüne Mosaik liebt, der kann mal Codeprints googeln.\"\n- \"Ja, es hängt leider nicht mehr an der Wand. Ich werde da persönlich noch mal Wolfgang.\"\n- \"Ja Bfansch eine sehr esoterische Programmiersprache also wenn du lolcode schon esoterisch findest. Dann ist B-Funch nochmal eine härtere Nummer.\"\n- \"Also ich denke ich habe ein Fable für Ideen mit denen man Maschinen Dinge beibringen kann also, wenn man irgendwas auf einer Maschine ausführen lassen will dann muss man das nicht immer in beispielsweise C oder Python machen.\"\n- \"Rust ist eine art und weise programme zu schreiben wie man sie eigentlich vorher noch nicht hatte und zwar in einer art und weise dass man fehler vermeidet die in typischen programmiersprachen wie c++ und c einfach prävalent sind.\"\n- \"Java verwaltet Speicher für dich mit einem Garbage Collector und zur Runtime wird da ab und zu mal einfach aufgeräumt und das ist eigentlich auch vollkommen okay. Sehr, sehr viele Dinge werden auf dem Heap allokiert und es gibt zum Beispiel Reference Counting.\"\n- \"Und Rust ist eine Möglichkeit, Speicher auf andere Art zu verwalten, indem der Compiler zur Compile-Zeit erkennt, ob Speicher beispielsweise von mehreren Stellen mutable, also veränderlich, beschrieben wird oder genutzt wird.\"\n- \"Geschwindigkeit ist für viele ein Einstiegsfaktor, weil die einfach aus Sprachen kommen, die vielleicht generell etwas langsam sind, wie Python oder JavaScript für manche Bereiche.\"\n- \"Man kann robusteren Code schreiben, der zur Laufzeit vielleicht nicht sehr viele Überraschungen bereithält.\"\n- \"Wenn's baut, dann läuft's auch.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Der Borrow Checker ist ein Teil des Rust-Compilers, der eben genau für Ownership und Borrowing zuständig ist und diese Regeln überprüft.\"\n- \"Es wird vom Programmierer verlangt, dass eine gewisse Disziplin herrscht im Code und dieses Prinzip einfach vom Rust Compiler vorausgesetzt.\"\n- \"Es gibt nur einen Compiler für Rust.\"\n- \"Gibt es bei Rust nur einen? Es gibt einen Referenz-Compiler, Rust C.\"\n- \"Rust ist eine Multi-Paradigm-Programmiersprache.\"\n- \"Rust kommt eigentlich aus der funktionalen Welt, also aus den ML-Sprachen.\"\n- \"Rust wurde mit dem Browser entwickelt und hat sich aber dann irgendwann verselbstständigt.\"\n- \"20 Prozent von Firefox sind in Rust.\"\n- \"Rust ist einfach eine sehr, sehr gute Sprache, mit der man auch parallel programmieren kann.\"\n- \"Bei Prototypes ist es wahrscheinlich etwas übertrieben. Also wenn es schnell gehen muss.\"\n- \"Klassisch benutzt man Rust dann, wenn man, ich sage jetzt mal, irgendwo zwischen dem Hardware- und Software-Interface agiert.\"\n- \"Alles was relativ nah am Metall ist, beispielsweise ein Betriebssystem, ein Dateisystem, vielleicht ein Webserver oder ein Proxy, alles was so Richtung High-Performance geht, ist natürlich ein spannendes Thema.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Also der Einstieg war schon extrem schwierig.\"\n- \"Rust ist schwierig wenn man es schwierig macht.\"\n- \"Je früher man aufhört zu kämpfen und zu lernen, desto leichter kann man sich das Leben machen.\"\n- \"Leute aus der C++-Ecke haben Probleme mit dem Ownership-Modell.\"\n- \"Leute aus der Python- oder JavaScript-Ecke haben wenig Probleme mit dem Ownership-Modell.\"\n- \"Die Lernkurve bei Rust war wie vor 25-30 Jahren, als ich das erste Mal programmiert habe.\"\n- \"Der Stack ist relativ einfach, aber nicht gut einsetzbar für spezielle Fälle wie Dateien.\"\n- \"In Rust gibt es Traits, wie Interfaces.\"\n- \"Jeder Datentyp, der den Copy Trait implementiert, kann frei kopiert werden.\"\n- \"Die Idee hinter Ownership ist, dass es einen Besitzer des Speicherbereichs gibt.\"\n- \"Wenn ich dir die Fernbedienung gebe, dann hast du sie, nicht ich.\"\n- \"Wenn eine Funktion die Ownership übernimmt, ist die Datei weg.\"\n- \"Speicherverwaltung in Rust funktioniert so.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Rust ist extrem explizit und will, dass schlimme Dinge nicht passieren.\"\n- \"Es gibt keinen Garbage Collector, aber ähnlich wie in C mit Free gibt es in Rust einen Drop.\"\n- \"Das Konzept der Smart-Pointer macht die Pointerverwaltung viel sicherer.\"\n- \"In Rust gibt es globale Variablen, aber man sollte sich klar sein, wie man Daten verwaltet und was man damit machen will.\"\n- \"Der Rust-Compiler verpflichtet den Entwickler, sich um das Speichermanagement zu kümmern.\"\n- \"Der Compiler gibt dir genau an, warum dein Programm nicht kompiliert und wie du das Problem lösen kannst.\"\n- \"Das Ownership- und Borrowing-Modell hilft dabei, parallel zu arbeiten und verhindert Fehler.\"\n- \"Der Compiler stellt sicher, dass Thread-sicheres Arbeiten gewährleistet ist, indem er auf mögliche Konflikte hinweist.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Das klassische Entwicklermodell ist ja eigentlich, du programmierst was, compilest das, und du kriegst irgendwie eine komische kryptische Errormeldung.\"\n- \"Auf jeden Fall kopierst du dann die erste Stackoverflow-Antwort und jetzt die erste Chat-GPT-Antwort und dann geht's einfach weiter.\"\n- \"Der Compiler im Rust sagt dir genau diese Zeile, diese Stelle, das machst du falsch und das sollte der Code sein, der da stehen sollte.\"\n- \"Wenn alles unsafe ist, dann ist es ja auch egal, was ich in meiner Programmiersprache mache, weil ich kann ja eh die Welt nicht retten.\"\n- \"Go sagt einfach wir wollen nicht auf eine 2.0 das heißt alles was wir bis jetzt gemacht haben muss irgendwie backwards compatible sein was extrem beeindruckend ist.\"\n- \"Warum ist das so? Weil Toolchains einfach darauf basieren, weil gewisse Prozesse in Firmen darauf basieren, dass der Compiler stabil ist.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"1. \"Die Leute haben das zum ersten Mal wirklich produktiv eingesetzt, haben dann festgestellt, es gibt ein paar Bugs, die man nur beheben kann, indem man ändert, was der Compiler macht.\"\n2. \"Angenommen, ich schreibe jetzt Async und das ist aber jetzt ein Keyword in der neuesten Version, dann ist das ein Bricking Change.\"\n3. \"Am Anfang nannte man das Epochs, mittlerweile heißt es Editions.\"\n4. \"Es gibt nicht einen Compiler, den man sich installiert, sondern mehrere.\"\n5. \"Man kann frei in diesen Editions hin und her wechseln, indem man einfach in der Cargo-Tumble seine Edition angibt.\"\n6. \"Und da gibt es ein cooles Konzept, das nennt sich Crater.\"\n7. \"Das ist ein Tool, mit dem alle Crates, die jemals veröffentlicht wurden.\"\n8. \"Also sehr pragmatischer Ansatz eigentlich.\"\n9. \"Ja, Go macht etwas sehr, sehr ähnliches.\"\n10. \"Willst du mir eigentlich sagen, die Leute, die Rust schreiben und maintainen, haben sich ein Ecosystem und ein Tooling geschaffen, womit die verifizieren können, ob Features genutzt werden und wie sie genutzt werden?\"\n11. \"Ist schon ein fairer Zugang, würde ich sagen.\"\n12. \"Die checken nicht nur, ob eine Änderung irgendwelchen Impact auf Crates hat, sondern wenn die feststellen, dass auch Crates, die davon betroffen sind, dann gehen die her, kontaktieren die Maintainer und senden den Pull-Request.\"\n13. \"Das ist schon wirklich Next Level würde ich sagen sehr sehr gut.\"\n14. \"Und interessanterweise, wir haben über Sprachen diskutiert und dann ist so Rust aufgekommen.\"\n15. \"Wie schafft Rust dieses Marketing, dass alle Leute irgendwie über rast sprechen und ich kenne ganz wenig leute die wirklich Rast mal probiert haben.\"\n16. \"Das Marketing ist natürlich.\"\n17. \"Man muss schon sagen, es sind natürlich Features, die man nicht gewöhnt ist, man ist nicht gewöhnt, dass der Compiler intelligent antwortet.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Und die Compiler-Meldungen, gerade wenn man an C und C++ denkt, sind manchmal so kryptisch, dass du keine Ahnung hast und überhaupt mal ewig lang probieren musst, überhaupt zu verstehen, was denn da das Problem ist.\"\n- \"Man hört halt diese Dinge und man wünscht sich eigentlich diese Dinge mit normalen Programmiersprachen, aber Rust hat dann natürlich eben diese Lernkurve und einen schwierigen Einstieg.\"\n- \"Rust hat momentan 3,7 Millionen Nutzer und 600.000 davon allein in den letzten sechs Monaten, was ein extrem beachtliches Wachstum ist.\"\n- \"Ich glaube, es wird vielleicht eher C++ Konkurrenz machen für neue Projekte.\"\n- \"Es ändert auf jeden Fall die Art und Weise, wie man Rust programmiert. Es ist fast wie ein Dialekt. Also ich vergleiche das, es ist so ähnlich wie Spanisch und Portugiesisch. Es klingt sehr ähnlich, es reimt sich, aber es ist halt trotzdem eine andere Sprache.\"\n- \"Man kann sich da sehr schnell verfangen und hat sehr, sehr viele Dependencies.\"\n- \"Compiletimes sind ein Riesenproblem, vor allen Dingen bei großen Applikationen.\"\n- \"Wenn du jetzt eine Applikation hast, sagen wir mal, die hat 100.000 Zeilen Code und du hast einen einigermaßen soliden Linux-Laptop beispielsweise und du nutzt ein paar Features wie vielleicht serde für Parsing, ja dann bist du schon mal bei Kompilierzeiten vielleicht zwischen 40 Sekunden und zwei drei Minuten.\"\n- \"Der Rust-Compiler wird auch selbst jedes Jahr um die 10% schneller, was ein guter Wert ist.\"\n- \"Bei Go ist es natürlich so, viele Sachen werden zu Runtime erledigt, deswegen ist Rust halt auch ein bisschen schneller als Go.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"In Rust wird beispielsweise für jeden Input, den eine generische Funktion hat, eine konkrete Version zur Compile-Zeit gebaut.\"\n- \"Und Rust basiert halt auf LLVM, was in C++ geschrieben ist.\"\n- \"Es gibt dieses Idomatic Rust Repository, was du angesprochen hast, wo ich solche Ressourcen eben sammle.\"\n- \"Ein klassisches Pattern ist das Builder-Pattern, weil in Rust gibt es keine Funktionen mit einer variablen Anzahl von Variablen.\"\n- \"Ne, es gibt keine Mehrfachvererbung beispielsweise, es gibt keine Interfaces.\"\n- \"Traits sind Eigenschaften, die Dinge haben können oder auch nicht.\"\n- \"Aber ist jetzt keine Hardcore-Objektorientierung mit Polymorphie und die ganzen Geschichten?\"\n- \"Und insgesamt gewöhnt man sich da aber sehr, sehr schnell dann an diese Art eher zu komponieren, also Composition über Inheritance zu machen.\"\n- \"Aber bei so ganzen Fassaden und so weiter, das kommt ja alles sehr stark aus dem objektorientierten Bereich.\"\n- \"Die kommen eigentlich auch eher, würde ich fast behaupten, aus der funktionalen Welt, mit algebraischen Datentypen, wie man sie vielleicht auch aus Haskell kennt.\"\n- \"Aber trotzdem würde ich sagen, die Sprache entwickelt sich.\"\n- \"Vererbung ja böse ist.\"\n- \"Falls ihr ein bisschen Feedback habt oder uns weiterempfehlen wollt, darüber würden wir uns sehr, sehr freuen, denn damit unterstützt ihr diesen Podcast.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Ich wette noch, also meta-technisch jetzt hier, ich würde gerne noch die Frage stellen, wenn du eine, eine Ressource zum Lernen empfehlen würdest.\"\n- \"Ja, das machen wir danach. Das fragt der Andi dann.\"\n- \"Da geht es um Rust in Produktion für Firmen, ja? Also nicht für den Hobbybereich und so weiter, also ganz speziell.\"\n- \"Ja, USB hat schon zum Übertragen, aber ich bin mir nicht sicher, ob das zum Strom geht.\"\n- \"Vielleicht weiß er, dass es geht und ihm ist es jetzt peinlich.\"\n- \"Mir ist das ein bisschen peinlich.\"\n- \"Wir haben einen Aufnahmetermin im Jahr. Wir haben zwei Gäste an diesem Tag und es fällt hier eins nach dem anderen aus.\"\n- \"Es hat nicht durchgehalten, weil du so viel redest.\""},"finish_reason":"stop"}],"results":[{"status":"fulfilled","value":{"id":"chatcmpl-8OCHukV6XhIQTuwOgbtKKtfZi9NcW","object":"chat.completion","created":1700777798,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Also, wer dieses grüne Mosaik liebt, der kann mal Codeprints googeln.\"\n- \"Ja, es hängt leider nicht mehr an der Wand. Ich werde da persönlich noch mal Wolfgang.\"\n- \"Ja Bfansch eine sehr esoterische Programmiersprache also wenn du lolcode schon esoterisch findest. Dann ist B-Funch nochmal eine härtere Nummer.\"\n- \"Also ich denke ich habe ein Fable für Ideen mit denen man Maschinen Dinge beibringen kann also, wenn man irgendwas auf einer Maschine ausführen lassen will dann muss man das nicht immer in beispielsweise C oder Python machen.\"\n- \"Rust ist eine art und weise programme zu schreiben wie man sie eigentlich vorher noch nicht hatte und zwar in einer art und weise dass man fehler vermeidet die in typischen programmiersprachen wie c++ und c einfach prävalent sind.\"\n- \"Java verwaltet Speicher für dich mit einem Garbage Collector und zur Runtime wird da ab und zu mal einfach aufgeräumt und das ist eigentlich auch vollkommen okay. Sehr, sehr viele Dinge werden auf dem Heap allokiert und es gibt zum Beispiel Reference Counting.\"\n- \"Und Rust ist eine Möglichkeit, Speicher auf andere Art zu verwalten, indem der Compiler zur Compile-Zeit erkennt, ob Speicher beispielsweise von mehreren Stellen mutable, also veränderlich, beschrieben wird oder genutzt wird.\"\n- \"Geschwindigkeit ist für viele ein Einstiegsfaktor, weil die einfach aus Sprachen kommen, die vielleicht generell etwas langsam sind, wie Python oder JavaScript für manche Bereiche.\"\n- \"Man kann robusteren Code schreiben, der zur Laufzeit vielleicht nicht sehr viele Überraschungen bereithält.\"\n- \"Wenn's baut, dann läuft's auch.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2418,"completion_tokens":411,"total_tokens":2829}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCHvsBjVHgAk8cNdoiPm29hJgJRv","object":"chat.completion","created":1700777799,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Der Borrow Checker ist ein Teil des Rust-Compilers, der eben genau für Ownership und Borrowing zuständig ist und diese Regeln überprüft.\"\n- \"Es wird vom Programmierer verlangt, dass eine gewisse Disziplin herrscht im Code und dieses Prinzip einfach vom Rust Compiler vorausgesetzt.\"\n- \"Es gibt nur einen Compiler für Rust.\"\n- \"Gibt es bei Rust nur einen? Es gibt einen Referenz-Compiler, Rust C.\"\n- \"Rust ist eine Multi-Paradigm-Programmiersprache.\"\n- \"Rust kommt eigentlich aus der funktionalen Welt, also aus den ML-Sprachen.\"\n- \"Rust wurde mit dem Browser entwickelt und hat sich aber dann irgendwann verselbstständigt.\"\n- \"20 Prozent von Firefox sind in Rust.\"\n- \"Rust ist einfach eine sehr, sehr gute Sprache, mit der man auch parallel programmieren kann.\"\n- \"Bei Prototypes ist es wahrscheinlich etwas übertrieben. Also wenn es schnell gehen muss.\"\n- \"Klassisch benutzt man Rust dann, wenn man, ich sage jetzt mal, irgendwo zwischen dem Hardware- und Software-Interface agiert.\"\n- \"Alles was relativ nah am Metall ist, beispielsweise ein Betriebssystem, ein Dateisystem, vielleicht ein Webserver oder ein Proxy, alles was so Richtung High-Performance geht, ist natürlich ein spannendes Thema.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2424,"completion_tokens":312,"total_tokens":2736}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCHuu5plMT7zyPTbMASqTCHl53P8","object":"chat.completion","created":1700777798,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Also der Einstieg war schon extrem schwierig.\"\n- \"Rust ist schwierig wenn man es schwierig macht.\"\n- \"Je früher man aufhört zu kämpfen und zu lernen, desto leichter kann man sich das Leben machen.\"\n- \"Leute aus der C++-Ecke haben Probleme mit dem Ownership-Modell.\"\n- \"Leute aus der Python- oder JavaScript-Ecke haben wenig Probleme mit dem Ownership-Modell.\"\n- \"Die Lernkurve bei Rust war wie vor 25-30 Jahren, als ich das erste Mal programmiert habe.\"\n- \"Der Stack ist relativ einfach, aber nicht gut einsetzbar für spezielle Fälle wie Dateien.\"\n- \"In Rust gibt es Traits, wie Interfaces.\"\n- \"Jeder Datentyp, der den Copy Trait implementiert, kann frei kopiert werden.\"\n- \"Die Idee hinter Ownership ist, dass es einen Besitzer des Speicherbereichs gibt.\"\n- \"Wenn ich dir die Fernbedienung gebe, dann hast du sie, nicht ich.\"\n- \"Wenn eine Funktion die Ownership übernimmt, ist die Datei weg.\"\n- \"Speicherverwaltung in Rust funktioniert so.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2408,"completion_tokens":262,"total_tokens":2670}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCHu3TsnxXmfaGOXJNsCnYL6GNFF","object":"chat.completion","created":1700777798,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Rust ist extrem explizit und will, dass schlimme Dinge nicht passieren.\"\n- \"Es gibt keinen Garbage Collector, aber ähnlich wie in C mit Free gibt es in Rust einen Drop.\"\n- \"Das Konzept der Smart-Pointer macht die Pointerverwaltung viel sicherer.\"\n- \"In Rust gibt es globale Variablen, aber man sollte sich klar sein, wie man Daten verwaltet und was man damit machen will.\"\n- \"Der Rust-Compiler verpflichtet den Entwickler, sich um das Speichermanagement zu kümmern.\"\n- \"Der Compiler gibt dir genau an, warum dein Programm nicht kompiliert und wie du das Problem lösen kannst.\"\n- \"Das Ownership- und Borrowing-Modell hilft dabei, parallel zu arbeiten und verhindert Fehler.\"\n- \"Der Compiler stellt sicher, dass Thread-sicheres Arbeiten gewährleistet ist, indem er auf mögliche Konflikte hinweist.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2335,"completion_tokens":211,"total_tokens":2546}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCHuicBjv5GNkie7V2LfQgWqglXG","object":"chat.completion","created":1700777798,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Das klassische Entwicklermodell ist ja eigentlich, du programmierst was, compilest das, und du kriegst irgendwie eine komische kryptische Errormeldung.\"\n- \"Auf jeden Fall kopierst du dann die erste Stackoverflow-Antwort und jetzt die erste Chat-GPT-Antwort und dann geht's einfach weiter.\"\n- \"Der Compiler im Rust sagt dir genau diese Zeile, diese Stelle, das machst du falsch und das sollte der Code sein, der da stehen sollte.\"\n- \"Wenn alles unsafe ist, dann ist es ja auch egal, was ich in meiner Programmiersprache mache, weil ich kann ja eh die Welt nicht retten.\"\n- \"Go sagt einfach wir wollen nicht auf eine 2.0 das heißt alles was wir bis jetzt gemacht haben muss irgendwie backwards compatible sein was extrem beeindruckend ist.\"\n- \"Warum ist das so? Weil Toolchains einfach darauf basieren, weil gewisse Prozesse in Firmen darauf basieren, dass der Compiler stabil ist.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2420,"completion_tokens":221,"total_tokens":2641}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCHux6DUkGzQJeM5TIXVH9oZvyLq","object":"chat.completion","created":1700777798,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"1. \"Die Leute haben das zum ersten Mal wirklich produktiv eingesetzt, haben dann festgestellt, es gibt ein paar Bugs, die man nur beheben kann, indem man ändert, was der Compiler macht.\"\n2. \"Angenommen, ich schreibe jetzt Async und das ist aber jetzt ein Keyword in der neuesten Version, dann ist das ein Bricking Change.\"\n3. \"Am Anfang nannte man das Epochs, mittlerweile heißt es Editions.\"\n4. \"Es gibt nicht einen Compiler, den man sich installiert, sondern mehrere.\"\n5. \"Man kann frei in diesen Editions hin und her wechseln, indem man einfach in der Cargo-Tumble seine Edition angibt.\"\n6. \"Und da gibt es ein cooles Konzept, das nennt sich Crater.\"\n7. \"Das ist ein Tool, mit dem alle Crates, die jemals veröffentlicht wurden.\"\n8. \"Also sehr pragmatischer Ansatz eigentlich.\"\n9. \"Ja, Go macht etwas sehr, sehr ähnliches.\"\n10. \"Willst du mir eigentlich sagen, die Leute, die Rust schreiben und maintainen, haben sich ein Ecosystem und ein Tooling geschaffen, womit die verifizieren können, ob Features genutzt werden und wie sie genutzt werden?\"\n11. \"Ist schon ein fairer Zugang, würde ich sagen.\"\n12. \"Die checken nicht nur, ob eine Änderung irgendwelchen Impact auf Crates hat, sondern wenn die feststellen, dass auch Crates, die davon betroffen sind, dann gehen die her, kontaktieren die Maintainer und senden den Pull-Request.\"\n13. \"Das ist schon wirklich Next Level würde ich sagen sehr sehr gut.\"\n14. \"Und interessanterweise, wir haben über Sprachen diskutiert und dann ist so Rust aufgekommen.\"\n15. \"Wie schafft Rust dieses Marketing, dass alle Leute irgendwie über rast sprechen und ich kenne ganz wenig leute die wirklich Rast mal probiert haben.\"\n16. \"Das Marketing ist natürlich.\"\n17. \"Man muss schon sagen, es sind natürlich Features, die man nicht gewöhnt ist, man ist nicht gewöhnt, dass der Compiler intelligent antwortet.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2367,"completion_tokens":481,"total_tokens":2848}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCHu9XjdeMOdEkVhMlaPrMyUOgmC","object":"chat.completion","created":1700777798,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Und die Compiler-Meldungen, gerade wenn man an C und C++ denkt, sind manchmal so kryptisch, dass du keine Ahnung hast und überhaupt mal ewig lang probieren musst, überhaupt zu verstehen, was denn da das Problem ist.\"\n- \"Man hört halt diese Dinge und man wünscht sich eigentlich diese Dinge mit normalen Programmiersprachen, aber Rust hat dann natürlich eben diese Lernkurve und einen schwierigen Einstieg.\"\n- \"Rust hat momentan 3,7 Millionen Nutzer und 600.000 davon allein in den letzten sechs Monaten, was ein extrem beachtliches Wachstum ist.\"\n- \"Ich glaube, es wird vielleicht eher C++ Konkurrenz machen für neue Projekte.\"\n- \"Es ändert auf jeden Fall die Art und Weise, wie man Rust programmiert. Es ist fast wie ein Dialekt. Also ich vergleiche das, es ist so ähnlich wie Spanisch und Portugiesisch. Es klingt sehr ähnlich, es reimt sich, aber es ist halt trotzdem eine andere Sprache.\"\n- \"Man kann sich da sehr schnell verfangen und hat sehr, sehr viele Dependencies.\"\n- \"Compiletimes sind ein Riesenproblem, vor allen Dingen bei großen Applikationen.\"\n- \"Wenn du jetzt eine Applikation hast, sagen wir mal, die hat 100.000 Zeilen Code und du hast einen einigermaßen soliden Linux-Laptop beispielsweise und du nutzt ein paar Features wie vielleicht serde für Parsing, ja dann bist du schon mal bei Kompilierzeiten vielleicht zwischen 40 Sekunden und zwei drei Minuten.\"\n- \"Der Rust-Compiler wird auch selbst jedes Jahr um die 10% schneller, was ein guter Wert ist.\"\n- \"Bei Go ist es natürlich so, viele Sachen werden zu Runtime erledigt, deswegen ist Rust halt auch ein bisschen schneller als Go.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2386,"completion_tokens":432,"total_tokens":2818}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCHuI1waZV19XmDXAUaXlirYaVHs","object":"chat.completion","created":1700777798,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"In Rust wird beispielsweise für jeden Input, den eine generische Funktion hat, eine konkrete Version zur Compile-Zeit gebaut.\"\n- \"Und Rust basiert halt auf LLVM, was in C++ geschrieben ist.\"\n- \"Es gibt dieses Idomatic Rust Repository, was du angesprochen hast, wo ich solche Ressourcen eben sammle.\"\n- \"Ein klassisches Pattern ist das Builder-Pattern, weil in Rust gibt es keine Funktionen mit einer variablen Anzahl von Variablen.\"\n- \"Ne, es gibt keine Mehrfachvererbung beispielsweise, es gibt keine Interfaces.\"\n- \"Traits sind Eigenschaften, die Dinge haben können oder auch nicht.\"\n- \"Aber ist jetzt keine Hardcore-Objektorientierung mit Polymorphie und die ganzen Geschichten?\"\n- \"Und insgesamt gewöhnt man sich da aber sehr, sehr schnell dann an diese Art eher zu komponieren, also Composition über Inheritance zu machen.\"\n- \"Aber bei so ganzen Fassaden und so weiter, das kommt ja alles sehr stark aus dem objektorientierten Bereich.\"\n- \"Die kommen eigentlich auch eher, würde ich fast behaupten, aus der funktionalen Welt, mit algebraischen Datentypen, wie man sie vielleicht auch aus Haskell kennt.\"\n- \"Aber trotzdem würde ich sagen, die Sprache entwickelt sich.\"\n- \"Vererbung ja böse ist.\"\n- \"Falls ihr ein bisschen Feedback habt oder uns weiterempfehlen wollt, darüber würden wir uns sehr, sehr freuen, denn damit unterstützt ihr diesen Podcast.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2465,"completion_tokens":355,"total_tokens":2820}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCHurzJd9pfgmZ7aXsczgTISa6JZ","object":"chat.completion","created":1700777798,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Ich wette noch, also meta-technisch jetzt hier, ich würde gerne noch die Frage stellen, wenn du eine, eine Ressource zum Lernen empfehlen würdest.\"\n- \"Ja, das machen wir danach. Das fragt der Andi dann.\"\n- \"Da geht es um Rust in Produktion für Firmen, ja? Also nicht für den Hobbybereich und so weiter, also ganz speziell.\"\n- \"Ja, USB hat schon zum Übertragen, aber ich bin mir nicht sicher, ob das zum Strom geht.\"\n- \"Vielleicht weiß er, dass es geht und ihm ist es jetzt peinlich.\"\n- \"Mir ist das ein bisschen peinlich.\"\n- \"Wir haben einen Aufnahmetermin im Jahr. Wir haben zwei Gäste an diesem Tag und es fällt hier eins nach dem anderen aus.\"\n- \"Es hat nicht durchgehalten, weil du so viel redest.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":757,"completion_tokens":195,"total_tokens":952}}}]},{"prompt":"You will be provided a list of quotes in a podcast episode.\nYour task is to select the 10 most most interesting quotes.\nProvide a list of selected quotes in German without any additional context or modifications.","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Also, wer dieses grüne Mosaik liebt, der kann mal Codeprints googeln.\"\n- \"Ja, es hängt leider nicht mehr an der Wand. Ich werde da persönlich noch mal Wolfgang.\"\n- \"Ja Bfansch eine sehr esoterische Programmiersprache also wenn du lolcode schon esoterisch findest. Dann ist B-Funch nochmal eine härtere Nummer.\"\n- \"Also ich denke ich habe ein Fable für Ideen mit denen man Maschinen Dinge beibringen kann also, wenn man irgendwas auf einer Maschine ausführen lassen will dann muss man das nicht immer in beispielsweise C oder Python machen.\"\n- \"Rust ist eine art und weise programme zu schreiben wie man sie eigentlich vorher noch nicht hatte und zwar in einer art und weise dass man fehler vermeidet die in typischen programmiersprachen wie c++ und c einfach prävalent sind.\"\n- \"Java verwaltet Speicher für dich mit einem Garbage Collector und zur Runtime wird da ab und zu mal einfach aufgeräumt und das ist eigentlich auch vollkommen okay. Sehr, sehr viele Dinge werden auf dem Heap allokiert und es gibt zum Beispiel Reference Counting.\"\n- \"Und Rust ist eine Möglichkeit, Speicher auf andere Art zu verwalten, indem der Compiler zur Compile-Zeit erkennt, ob Speicher beispielsweise von mehreren Stellen mutable, also veränderlich, beschrieben wird oder genutzt wird.\"\n- \"Geschwindigkeit ist für viele ein Einstiegsfaktor, weil die einfach aus Sprachen kommen, die vielleicht generell etwas langsam sind, wie Python oder JavaScript für manche Bereiche.\"\n- \"Es gibt nur einen Compiler für Rust.\"\n- \"Die Lernkurve bei Rust war wie vor 25-30 Jahren, als ich das erste Mal programmiert habe.\""},"finish_reason":"stop"},{"index":0,"message":{"role":"assistant","content":"- \"Es klingt sehr ähnlich, es reimt sich, aber es ist halt trotzdem eine andere Sprache.\"\n- \"Man kann sich da sehr schnell verfangen und hat sehr, sehr viele Dependencies.\"\n- \"Compiletimes sind ein Riesenproblem, vor allen Dingen bei großen Applikationen.\"\n- \"Wenn du jetzt eine Applikation hast, sagen wir mal, die hat 100.000 Zeilen Code und du hast einen einigermaßen soliden Linux-Laptop beispielsweise und du nutzt ein paar Features wie vielleicht serde für Parsing, ja dann bist du schon mal bei Kompilierzeiten vielleicht zwischen 40 Sekunden und zwei drei Minuten.\"\n- \"Der Rust-Compiler wird auch selbst jedes Jahr um die 10% schneller, was ein guter Wert ist.\"\n- \"Bei Go ist es natürlich so, viele Sachen werden zu Runtime erledigt, deswegen ist Rust halt auch ein bisschen schneller als Go.\"\n- \"In Rust wird beispielsweise für jeden Input, den eine generische Funktion hat, eine konkrete Version zur Compile-Zeit gebaut.\"\n- \"Und Rust basiert halt auf LLVM, was in C++ geschrieben ist.\"\n- \"Es gibt dieses Idomatic Rust Repository, was du angesprochen hast, wo ich solche Ressourcen eben sammle.\"\n- \"Ein klassisches Pattern ist das Builder-Pattern, weil in Rust gibt es keine Funktionen mit einer variablen Anzahl von Variablen.\""},"finish_reason":"stop"}],"results":[{"status":"fulfilled","value":{"id":"chatcmpl-8OCIvLk5WOwgltPI2eaEI5NXltOCh","object":"chat.completion","created":1700777861,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Also, wer dieses grüne Mosaik liebt, der kann mal Codeprints googeln.\"\n- \"Ja, es hängt leider nicht mehr an der Wand. Ich werde da persönlich noch mal Wolfgang.\"\n- \"Ja Bfansch eine sehr esoterische Programmiersprache also wenn du lolcode schon esoterisch findest. Dann ist B-Funch nochmal eine härtere Nummer.\"\n- \"Also ich denke ich habe ein Fable für Ideen mit denen man Maschinen Dinge beibringen kann also, wenn man irgendwas auf einer Maschine ausführen lassen will dann muss man das nicht immer in beispielsweise C oder Python machen.\"\n- \"Rust ist eine art und weise programme zu schreiben wie man sie eigentlich vorher noch nicht hatte und zwar in einer art und weise dass man fehler vermeidet die in typischen programmiersprachen wie c++ und c einfach prävalent sind.\"\n- \"Java verwaltet Speicher für dich mit einem Garbage Collector und zur Runtime wird da ab und zu mal einfach aufgeräumt und das ist eigentlich auch vollkommen okay. Sehr, sehr viele Dinge werden auf dem Heap allokiert und es gibt zum Beispiel Reference Counting.\"\n- \"Und Rust ist eine Möglichkeit, Speicher auf andere Art zu verwalten, indem der Compiler zur Compile-Zeit erkennt, ob Speicher beispielsweise von mehreren Stellen mutable, also veränderlich, beschrieben wird oder genutzt wird.\"\n- \"Geschwindigkeit ist für viele ein Einstiegsfaktor, weil die einfach aus Sprachen kommen, die vielleicht generell etwas langsam sind, wie Python oder JavaScript für manche Bereiche.\"\n- \"Es gibt nur einen Compiler für Rust.\"\n- \"Die Lernkurve bei Rust war wie vor 25-30 Jahren, als ich das erste Mal programmiert habe.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":2179,"completion_tokens":407,"total_tokens":2586}}},{"status":"fulfilled","value":{"id":"chatcmpl-8OCIvgBRKximnHRs1LgPYS6ma8qKW","object":"chat.completion","created":1700777861,"model":"gpt-3.5-turbo-0613","choices":[{"index":0,"message":{"role":"assistant","content":"- \"Es klingt sehr ähnlich, es reimt sich, aber es ist halt trotzdem eine andere Sprache.\"\n- \"Man kann sich da sehr schnell verfangen und hat sehr, sehr viele Dependencies.\"\n- \"Compiletimes sind ein Riesenproblem, vor allen Dingen bei großen Applikationen.\"\n- \"Wenn du jetzt eine Applikation hast, sagen wir mal, die hat 100.000 Zeilen Code und du hast einen einigermaßen soliden Linux-Laptop beispielsweise und du nutzt ein paar Features wie vielleicht serde für Parsing, ja dann bist du schon mal bei Kompilierzeiten vielleicht zwischen 40 Sekunden und zwei drei Minuten.\"\n- \"Der Rust-Compiler wird auch selbst jedes Jahr um die 10% schneller, was ein guter Wert ist.\"\n- \"Bei Go ist es natürlich so, viele Sachen werden zu Runtime erledigt, deswegen ist Rust halt auch ein bisschen schneller als Go.\"\n- \"In Rust wird beispielsweise für jeden Input, den eine generische Funktion hat, eine konkrete Version zur Compile-Zeit gebaut.\"\n- \"Und Rust basiert halt auf LLVM, was in C++ geschrieben ist.\"\n- \"Es gibt dieses Idomatic Rust Repository, was du angesprochen hast, wo ich solche Ressourcen eben sammle.\"\n- \"Ein klassisches Pattern ist das Builder-Pattern, weil in Rust gibt es keine Funktionen mit einer variablen Anzahl von Variablen.\""},"finish_reason":"stop"}],"usage":{"prompt_tokens":811,"completion_tokens":323,"total_tokens":1134}}}]}]